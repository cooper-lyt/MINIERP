package com.dgsoft.common.system.model;
// Generated Apr 28, 2013 11:02:59 AM by Hibernate Tools 4.0.0

import com.google.common.collect.Iterators;
import org.hibernate.annotations.GenericGenerator;

import java.util.*;
import javax.persistence.*;
import javax.swing.tree.TreeNode;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 * Organization generated by hbm2java
 */
@Entity
@Table(name = "ORGANIZATION", catalog = "DG_SYSTEM")
public class Organization implements java.io.Serializable, TreeNode {

    private String id;
    private Organization organization;
    private boolean root;
    private String name;
    private String phoneNumber;
    private String memo;
    private Set<Organization> organizations = new HashSet<Organization>(0);
    private Set<Employee> employees = new HashSet<Employee>(0);

    public Organization() {
    }

    public Organization(String id, boolean root, String name) {
        this.id = id;
        this.root = root;
        this.name = name;
    }

    public Organization(String id, Organization organization,
                        boolean root, String name, String phoneNumber, String memo,
                        Set<Organization> organizations, Set<Employee> employees) {
        this.id = id;
        this.organization = organization;
        this.root = root;
        this.name = name;
        this.phoneNumber = phoneNumber;
        this.memo = memo;
        this.organizations = organizations;
        this.employees = employees;
    }

    @Id
    @Column(name = "ID", unique = true, nullable = false, length = 32)
    @NotNull
    @Size(max = 32)
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid.hex")
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "PARENT")
    public Organization getOrganization() {
        return this.organization;
    }

    public void setOrganization(Organization organization) {
        this.organization = organization;
    }

    @Column(name = "ROOT", nullable = false)
    public boolean isRoot() {
        return this.root;
    }

    public void setRoot(boolean root) {
        this.root = root;
    }

    @Column(name = "NAME", nullable = false, length = 50)
    @NotNull
    @Size(max = 50)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "PHONE_NUMBER", length = 20)
    @Size(max = 20)
    public String getPhoneNumber() {
        return this.phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    @Column(name = "MEMO", length = 100)
    @Size(max = 100)
    public String getMemo() {
        return this.memo;
    }

    public void setMemo(String memo) {
        this.memo = memo;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "organization")
    public Set<Organization> getOrganizations() {
        return this.organizations;
    }

    public void setOrganizations(Set<Organization> organizations) {
        this.organizations = organizations;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "organization")
    public Set<Employee> getEmployees() {
        return this.employees;
    }

    public void setEmployees(Set<Employee> employees) {
        this.employees = employees;
    }

    @Transient
    public List<Employee> getEmployeeList(){
        List<Employee> result = new ArrayList<Employee>(getEmployees());
        Collections.sort(result,new Comparator<Employee>() {
            @Override
            public int compare(Employee o1, Employee o2) {
                return o1.getId().compareTo(o2.getId());
            }
        });
        return result;
    }

    @Transient
    public List<Organization> getOrganizationList() {
        List<Organization> result = new ArrayList<Organization>(getOrganizations());
        Collections.sort(result, new Comparator<Organization>() {
            @Override
            public int compare(Organization o1, Organization o2) {
                return o1.getName().compareTo(o2.getName());
            }
        });
        return result;
    }

    @Override
    @Transient
    public TreeNode getChildAt(int childIndex) {
        return getOrganizationList().get(childIndex);
    }

    @Override
    @Transient
    public int getChildCount() {
        return getOrganizations().size();
    }

    @Override
    @Transient
    public TreeNode getParent() {
        return getOrganization();
    }

    @Override
    @Transient
    public int getIndex(TreeNode node) {
        return getOrganizationList().indexOf(node);
    }

    @Override
    @Transient
    public boolean getAllowsChildren() {
        return true;
    }

    @Override
    @Transient
    public boolean isLeaf() {
        return getOrganizations().isEmpty();
    }

    @Override
    @Transient
    public Enumeration children() {
        return Iterators.asEnumeration(getOrganizationList().iterator());
    }



}
