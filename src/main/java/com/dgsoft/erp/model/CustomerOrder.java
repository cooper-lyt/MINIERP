package com.dgsoft.erp.model;
// Generated Oct 28, 2013 12:46:39 PM by Hibernate Tools 4.0.0

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 * CustomerOrder generated by hbm2java
 */
@Entity
@Table(name = "CUSTOMER_ORDER", catalog = "MINI_ERP")
public class CustomerOrder implements java.io.Serializable {

	private String id;
	private Integer version;
	private Customer customer;
	private String state;
    private String orderEmp;
	private String payType;
	private Date createDate;
	private BigDecimal money;
	private Date completeDate;
	private BigDecimal profit;
	private String memo;
	private boolean middleManPay;
    private Dispatch dispatche;
	private Set<OrderBack> orderBacks = new HashSet<OrderBack>(0);
	private Set<MiddleMoney> middleMoneys = new HashSet<MiddleMoney>(0);

    private Set<AccountOper> accountOpers = new HashSet<AccountOper>(0);
	private Set<OrderItem> orderItems = new HashSet<OrderItem>(0);
	private Set<OrderStoreOut> orderStoreOuts = new HashSet<OrderStoreOut>(0);

	public CustomerOrder() {
	}

	public CustomerOrder(String id, Customer customer, String state,
			String payType, Date createDate, BigDecimal money,
			boolean middleManPay) {
		this.id = id;
		this.customer = customer;
		this.state = state;
		this.payType = payType;
		this.createDate = createDate;
		this.money = money;
		this.middleManPay = middleManPay;
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, length = 32)
	@NotNull
	@Size(max = 32)
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@Version
	@Column(name = "VERSION")
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CUSTOMER_ID", nullable = false)
	@NotNull
	public Customer getCustomer() {
		return this.customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	@Column(name = "STATE", nullable = false, length = 20)
	@NotNull
	@Size(max = 20)
	public String getState() {
		return this.state;
	}

	public void setState(String state) {
		this.state = state;
	}

	@Column(name = "PAY_TYPE", nullable = false, length = 32)
	@NotNull
	@Size(max = 32)
	public String getPayType() {
		return this.payType;
	}

	public void setPayType(String payType) {
		this.payType = payType;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATE_DATE", nullable = false, length = 19)
	@NotNull
	public Date getCreateDate() {
		return this.createDate;
	}

	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

    @Column(name = "ORDER_EMPLOYEE", nullable = false, length = 32)
    @NotNull
    @Size(max = 32)
    public String getOrderEmp() {
        return orderEmp;
    }

    public void setOrderEmp(String orderEmp) {
        this.orderEmp = orderEmp;
    }

    @Column(name = "MONEY", nullable = false, scale = 3)
	@NotNull
	public BigDecimal getMoney() {
		return this.money;
	}

	public void setMoney(BigDecimal money) {
		this.money = money;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "COMPLETE_DATE", length = 19)
	public Date getCompleteDate() {
		return this.completeDate;
	}

	public void setCompleteDate(Date completeDate) {
		this.completeDate = completeDate;
	}

	@Column(name = "PROFIT", scale = 3)
	public BigDecimal getProfit() {
		return this.profit;
	}

	public void setProfit(BigDecimal profit) {
		this.profit = profit;
	}

	@Column(name = "MEMO", length = 200)
	@Size(max = 200)
	public String getMemo() {
		return this.memo;
	}

	public void setMemo(String memo) {
		this.memo = memo;
	}

	@Column(name = "MIDDLE_MAN_PAY", nullable = false)
	public boolean isMiddleManPay() {
		return this.middleManPay;
	}

	public void setMiddleManPay(boolean middleManPay) {
		this.middleManPay = middleManPay;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerOrder")
	public Set<OrderBack> getOrderBacks() {
		return this.orderBacks;
	}

	public void setOrderBacks(Set<OrderBack> orderBacks) {
		this.orderBacks = orderBacks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerOrder")
	public Set<MiddleMoney> getMiddleMoneys() {
		return this.middleMoneys;
	}

	public void setMiddleMoneys(Set<MiddleMoney> middleMoneys) {
		this.middleMoneys = middleMoneys;
	}

	@OneToOne(optional = false, fetch = FetchType.LAZY, mappedBy = "customerOrder")
	public Dispatch getDispatche() {
		return this.dispatche;
	}

	public void setDispatche(Dispatch dispatche) {
		this.dispatche = dispatche;
	}

    @ManyToMany(fetch = FetchType.LAZY, targetEntity = AccountOper.class)
    @JoinTable(name = "ORDER_PAY", joinColumns = @JoinColumn(name = "CUSTOMER_ORDER"), inverseJoinColumns = @JoinColumn(name = "ACCOUNT_OPER"))
    public Set<AccountOper> getAccountOpers() {
        return accountOpers;
    }

    public void setAccountOpers(Set<AccountOper> accountOpers) {
        this.accountOpers = accountOpers;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "customerOrder")
	public Set<OrderItem> getOrderItems() {
		return this.orderItems;
	}

	public void setOrderItems(Set<OrderItem> orderItems) {
		this.orderItems = orderItems;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "customerOrder")
	public Set<OrderStoreOut> getOrderStoreOuts() {
		return this.orderStoreOuts;
	}

	public void setOrderStoreOuts(Set<OrderStoreOut> orderStoreOuts) {
		this.orderStoreOuts = orderStoreOuts;
	}

}
