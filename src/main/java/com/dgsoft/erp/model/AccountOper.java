package com.dgsoft.erp.model;
// Generated Nov 5, 2013 1:32:07 PM by Hibernate Tools 4.0.0

import com.dgsoft.erp.model.api.PayType;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.math.BigDecimal;
import java.util.Date;
import java.util.EnumSet;

/**
 * AccountOper generated by hbm2java
 */
@Entity
@Table(name = "ACCOUNT_OPER", catalog = "MINI_ERP")
public class AccountOper implements java.io.Serializable {

//    public enum AccountOperType {
//        ORDER_SAVINGS(true,true,true), ORDER_PAY(false,false,false), ORDER_EARNEST(false,false,false),
//        PRE_DEPOSIT(true,true,true),PRE_DEPOSIT_BY_ORDER(true,false,false), DEPOSIT_BACK(false,true,false), ORDER_FREE(true,false,false),
//        ORDER_BACK_SAVINGS(true,false,false), ORDER_BACK(false,true,false),
//        ORDER_CANCEL_SAVINGS(true,false,false), ORDER_CANCEL_BACK(false,true,false);
//
//        public static EnumSet<AccountOperType> allCustomerOper(){
//            return EnumSet.of(ORDER_SAVINGS,PRE_DEPOSIT,DEPOSIT_BACK,ORDER_FREE,ORDER_BACK,ORDER_CANCEL_BACK);
//        }
//
//        private boolean containRemitFee;
//
//        private boolean customerOper;
//
//        private boolean add;
//
//        public boolean isAdd() {
//            return add;
//        }
//
//        public boolean isCustomerOper() {
//            return customerOper;
//        }
//
//        public boolean isContainRemitFee() {
//            return containRemitFee;
//        }
//
//        private AccountOperType(boolean add,boolean customerOper,boolean containRemitFee) {
//            this.add = add;
//            this.customerOper = customerOper;
//            this.containRemitFee = containRemitFee;
//        }
//    }

    public enum AccountOperType {
        DEPOSIT_BACK,
        PRE_DEPOSIT,


        ORDER_SAVINGS,
        ORDER_FREE,
        ORDER_PAY,

        ORDER_BACK,
        ORDER_CANCEL,

        MONEY_BACK_TO_PREPARE,
        MONEY_BACK_TO_CUSTOMER;

        public static EnumSet<AccountOperType> getCustomerOpers() {
            return EnumSet.of(ORDER_SAVINGS, PRE_DEPOSIT, DEPOSIT_BACK, MONEY_BACK_TO_CUSTOMER);
        }


        public boolean isCustomerOper() {
            return getCustomerOpers().contains(this);
        }

    }

    private String id;
    private Customer customer;
    private String operEmp;
    //private BigDecimal operMoney;
    private AccountOperType operType;
    private Date operDate;
    private String description;
    private PayType payType;
    private String checkNumber;

    private BigDecimal remitFee;
    private BigDecimal advanceReceivable;
    private BigDecimal accountsReceivable;
    private BigDecimal proxcAccountsReceiveable;


    private BackPrepareMoney backPrepareMoney;
    private PreparePay preparePay;
    private OrderBack orderBack;
    private CustomerOrder customerOrder;
    private BankAccount bankAccount;


    public AccountOper() {
    }

    public AccountOper(AccountOperType operType, Customer customer, String operEmp) {
        this.operEmp = operEmp;
        this.operType = operType;
        this.customer = customer;
    }


    //    public AccountOper(Customer customer, String operEmp,
//                       BigDecimal operMoney, AccountOperType operType,
//                       Date operDate,
//                       String description, PayType payType, CustomerOrder customerOrder,
//                       String checkNumber, BigDecimal remitFee) {
//        this.customer = customer;
//        this.operEmp = operEmp;
//        this.operMoney = operMoney;
//        this.operType = operType;
//        this.operDate = operDate;
//        this.description = description;
//        this.payType = payType;
//        this.customerOrder = customerOrder;
//        this.checkNumber = checkNumber;
//        this.remitFee = remitFee;
//    }
//
    public AccountOper(PreparePay preparePay, Customer customer, String operEmp) {
        this.operType = AccountOperType.PRE_DEPOSIT;
        this.preparePay = preparePay;
        this.customer = customer;
        this.operEmp = operEmp;
    }

    public AccountOper(BackPrepareMoney backPrepareMoney, Customer customer, String operEmp) {
        this.operType = AccountOperType.DEPOSIT_BACK;
        this.backPrepareMoney = backPrepareMoney;
        this.customer = customer;
        this.operEmp = operEmp;
    }


    public AccountOper(OrderBack orderBack, String operEmp, AccountOperType operType, Date operDate,
                       BigDecimal remitFee, BigDecimal advanceReceivable, BigDecimal accountsReceivable) {
        this.orderBack = orderBack;
        this.customer = orderBack.getCustomer();
        this.operEmp = operEmp;
        this.operType = operType;
        this.remitFee = remitFee;
        this.advanceReceivable = advanceReceivable;
        this.accountsReceivable = accountsReceivable;
        this.operDate = operDate;
        this.proxcAccountsReceiveable = BigDecimal.ZERO;
    }
//
//    public AccountOper(CustomerOrder order, String operEmp, BigDecimal remitFee) {
//        this.customerOrder = order;
//        this.operEmp = operEmp;
//        this.remitFee = remitFee;
//        this.customer = order.getCustomer();
//        this.operType = AccountOperType.ORDER_CANCEL_SAVINGS;
//        this.operMoney = order.getReceiveMoney();
//    }

    @Id
    @Column(name = "ID", unique = true, nullable = false, length = 32)
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid.hex")
    @NotNull
    @Size(max = 32)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY, cascade = {CascadeType.PERSIST})
    @JoinColumn(name = "CUSTOM", nullable = false)
    @NotNull
    public Customer getCustomer() {
        return this.customer;
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
    }

    @Column(name = "OPER_EMP", nullable = false, length = 32)
    @NotNull
    @Size(max = 32)
    public String getOperEmp() {
        return this.operEmp;
    }

    public void setOperEmp(String operEmp) {
        this.operEmp = operEmp;
    }

    @Enumerated(EnumType.STRING)
    @Column(name = "OPER_TYPE", nullable = false, length = 32)
    @NotNull
    public AccountOperType getOperType() {
        return this.operType;
    }

    public void setOperType(AccountOperType operType) {
        this.operType = operType;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "OPER_DATE", nullable = false, length = 19)
    @NotNull
    public Date getOperDate() {
        return this.operDate;
    }

    public void setOperDate(Date operDate) {
        this.operDate = operDate;
    }

    @Column(name = "REMIT_FEE", nullable = false, scale = 3)
    @NotNull
    public BigDecimal getRemitFee() {
        return remitFee;
    }

    public void setRemitFee(BigDecimal remitFee) {
        this.remitFee = remitFee;
    }

    @Column(name = "DESCRIPTION", length = 200)
    @Size(max = 200)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Enumerated(EnumType.STRING)
    @Column(name = "PAY_TYPE", nullable = true, length = 32)
    public PayType getPayType() {
        return this.payType;
    }

    public void setPayType(PayType payType) {
        this.payType = payType;
    }

    @Transient
    public PayType getDisplayPayType() {
        if (getOperType().isCustomerOper()) {
            return getPayType();
        } else {
            return null;
        }
    }

    @Column(name = "CHECK_NUMBER", length = 50)
    @Size(max = 50)
    public String getCheckNumber() {
        return this.checkNumber;
    }

    public void setCheckNumber(String checkNumber) {
        this.checkNumber = checkNumber;
    }


    @ManyToOne(optional = true, fetch = FetchType.LAZY)
    @JoinColumn(name = "CUSTOMER_ORDER", nullable = true)
    public CustomerOrder getCustomerOrder() {
        return this.customerOrder;
    }

    public void setCustomerOrder(CustomerOrder orderPays) {
        this.customerOrder = orderPays;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "accountOper")
    public BackPrepareMoney getBackPrepareMoney() {
        return this.backPrepareMoney;
    }

    public void setBackPrepareMoney(BackPrepareMoney backPrepareMoney) {
        this.backPrepareMoney = backPrepareMoney;
    }

    @OneToOne(optional = true, fetch = FetchType.LAZY, mappedBy = "accountOper")
    public PreparePay getPreparePay() {
        return this.preparePay;
    }

    public void setPreparePay(PreparePay preparePay) {
        this.preparePay = preparePay;
    }

    @ManyToOne(optional = true, fetch = FetchType.LAZY)
    @JoinColumn(name = "ORDER_BACK", nullable = true)
    public OrderBack getOrderBack() {
        return this.orderBack;
    }

    public void setOrderBack(OrderBack orderBack) {
        this.orderBack = orderBack;
    }

    @ManyToOne(optional = true, fetch = FetchType.LAZY)
    @JoinColumn(name = "BANK_ACCOUNT", nullable = true)
    public BankAccount getBankAccount() {
        return bankAccount;
    }

    public void setBankAccount(BankAccount bankAccount) {
        this.bankAccount = bankAccount;
    }

    @Column(name = "ADVANCE_RECEIVABLE", nullable = false, scale = 3)
    @NotNull
    public BigDecimal getAdvanceReceivable() {
        return advanceReceivable;
    }

    public void setAdvanceReceivable(BigDecimal advanceReceivable) {
        this.advanceReceivable = advanceReceivable;
    }

    @Column(name = "ACCOUNTS_RECEIVABLE", nullable = false, scale = 3)
    @NotNull
    public BigDecimal getAccountsReceivable() {
        return accountsReceivable;
    }

    public void setAccountsReceivable(BigDecimal accountsReceivable) {
        this.accountsReceivable = accountsReceivable;
    }


    @Column(name = "PROXY_ACCOUNTS_RECEIVABLE", nullable = false, scale = 3)
    @NotNull
    public BigDecimal getProxcAccountsReceiveable() {
        return proxcAccountsReceiveable;
    }

    public void setProxcAccountsReceiveable(BigDecimal proxcAccountsReceiveable) {
        this.proxcAccountsReceiveable = proxcAccountsReceiveable;
    }

    @Transient
    public BigDecimal getRealMoney() {
        return getAccountsReceivable().add(getAdvanceReceivable()).add(getProxcAccountsReceiveable());
    }

    @Transient
    public BigDecimal getOperMoney() {
        return getRealMoney().add(getRemitFee());
    }

    @Transient
    public void calcCustomerMoney(){
        switch (getOperType()){

            case DEPOSIT_BACK:
                getCustomer().setAdvanceMoney(getCustomer().getAdvanceMoney().subtract(getAdvanceReceivable()));
                break;
            case PRE_DEPOSIT:
                getCustomer().setAdvanceMoney(getCustomer().getAdvanceMoney().add(getAdvanceReceivable()));
                break;
            case ORDER_SAVINGS:
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().subtract(getAccountsReceivable()));
                getCustomer().setAdvanceMoney(getCustomer().getAdvanceMoney().add(getAdvanceReceivable()));
                getCustomer().setProxyAccountMoney(getCustomer().getProxyAccountMoney().subtract(getProxcAccountsReceiveable()));
                break;
            case ORDER_FREE:
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().subtract(getAccountsReceivable()));
                break;
            case ORDER_PAY:
                getCustomer().setAdvanceMoney(getCustomer().getAdvanceMoney().subtract(getAdvanceReceivable()));
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().add(getAccountsReceivable()));
                getCustomer().setProxyAccountMoney(getCustomer().getProxyAccountMoney().add(getProxcAccountsReceiveable()));
                break;
            case ORDER_BACK:
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().subtract(getAccountsReceivable()));
                break;
            case ORDER_CANCEL:
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().subtract(getAccountsReceivable()));
                break;
            case MONEY_BACK_TO_PREPARE:
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().add(getAccountsReceivable()));
                getCustomer().setAdvanceMoney(getCustomer().getAdvanceMoney().add(getAdvanceReceivable()));
                break;
            case MONEY_BACK_TO_CUSTOMER:
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().add(getAccountsReceivable()));
                break;
        }


    }



    //TODO remove frome report
//    @Transient
//    @Deprecated
//    public BigDecimal getBankRemitFee() {
//        if (getOperType().equals(AccountOperType.DEPOSIT_BACK) ||
//                getOperType().equals(AccountOperType.ORDER_BACK) ||
//                AccountOperType.ORDER_CANCEL_BACK.equals(getOperType())) {
//            return getRemitFee();
//        }
//        return BigDecimal.ZERO;
//    }
}
