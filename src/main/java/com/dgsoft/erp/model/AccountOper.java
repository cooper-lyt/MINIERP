package com.dgsoft.erp.model;
// Generated Nov 5, 2013 1:32:07 PM by Hibernate Tools 4.0.0

import com.dgsoft.erp.model.api.PayType;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.math.BigDecimal;
import java.util.Date;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Set;

/**
 * AccountOper generated by hbm2java
 */
@Entity
@Table(name = "ACCOUNT_OPER", catalog = "MINI_ERP")
public class AccountOper implements java.io.Serializable {


    public enum AccountOperType {
        DEPOSIT_BACK(false),

        PROXY_SAVINGS(true),
        CUSTOMER_SAVINGS(true),
        DEPOSIT_PAY(null),
        MONEY_FREE(null),
        ORDER_PAY(null),

        ORDER_BACK(null);


        public static EnumSet<AccountOperType> getCustomerOpers() {
            return EnumSet.of(DEPOSIT_BACK, PROXY_SAVINGS, CUSTOMER_SAVINGS);
        }

        public boolean isCustomerOper() {
            return getCustomerOpers().contains(this);
        }

        private Boolean receive;

        public Boolean isReceive() {
            return receive;
        }

        private AccountOperType(Boolean receive) {
            this.receive = receive;
        }
    }

    private String id;
    private Customer customer;
    private String operEmp;
    private AccountOperType operType;
    private Date operDate;
    private String description;

    private BigDecimal advanceReceivable;
    private BigDecimal accountsReceivable;
    private BigDecimal proxcAccountsReceiveable;

    private MoneySave moneySave;


    public AccountOper() {
    }

    public AccountOper(AccountOperType operType, Customer customer, String operEmp) {
        this.operEmp = operEmp;
        this.operType = operType;
        this.customer = customer;
        this.advanceReceivable = BigDecimal.ZERO;
        this.accountsReceivable = BigDecimal.ZERO;
        this.proxcAccountsReceiveable = BigDecimal.ZERO;
    }

//    public AccountOper(PreparePay preparePay, Customer customer, String operEmp) {
//        this.operType = AccountOperType.PRE_DEPOSIT;
//        this.preparePay = preparePay;
//        this.customer = customer;
//        this.operEmp = operEmp;
//    }
//
//    public AccountOper(BackPrepareMoney backPrepareMoney, Customer customer, String operEmp) {
//        this.operType = AccountOperType.DEPOSIT_BACK;
//        this.backPrepareMoney = backPrepareMoney;
//        this.customer = customer;
//        this.operEmp = operEmp;
//    }
//
//
//    public AccountOper(OrderBack orderBack, String operEmp, AccountOperType operType, Date operDate,
//                       BigDecimal remitFee, BigDecimal advanceReceivable, BigDecimal accountsReceivable) {
//        this.orderBack = orderBack;
//        this.customer = orderBack.getCustomer();
//        this.operEmp = operEmp;
//        this.operType = operType;
//        this.remitFee = remitFee;
//        this.advanceReceivable = advanceReceivable;
//        this.accountsReceivable = accountsReceivable;
//        this.operDate = operDate;
//        this.proxcAccountsReceiveable = BigDecimal.ZERO;
//    }
//
//    public AccountOper(CustomerOrder order, String operEmp, AccountOperType operType){
//        this.customerOrder = order;
//        this.customer = order.getCustomer();
//        this.operEmp = operEmp;
//        this.operType = operType;
//    }
//
//    public AccountOper(CustomerOrder order, String operEmp, AccountOperType operType, Date operDate,
//                       BigDecimal remitFee, BigDecimal advanceReceivable, BigDecimal accountsReceivable, BigDecimal proxcAccountsReceiveable) {
//        this.customerOrder = order;
//        this.customer = order.getCustomer();
//        this.operEmp = operEmp;
//        this.operType = operType;
//        this.remitFee = remitFee;
//        this.advanceReceivable = advanceReceivable;
//        this.accountsReceivable = accountsReceivable;
//        this.operDate = operDate;
//        this.proxcAccountsReceiveable = proxcAccountsReceiveable;
//    }

    @Id
    @Column(name = "ID", unique = true, nullable = false, length = 32)
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid.hex")
    @NotNull
    @Size(max = 32)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY, cascade = {CascadeType.PERSIST})
    @JoinColumn(name = "CUSTOM", nullable = false)
    @NotNull
    public Customer getCustomer() {
        return this.customer;
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
    }

    @Column(name = "OPER_EMP", nullable = false, length = 32)
    @NotNull
    @Size(max = 32)
    public String getOperEmp() {
        return this.operEmp;
    }

    public void setOperEmp(String operEmp) {
        this.operEmp = operEmp;
    }

    @Enumerated(EnumType.STRING)
    @Column(name = "OPER_TYPE", nullable = false, length = 32)
    @NotNull
    public AccountOperType getOperType() {
        return this.operType;
    }

    public void setOperType(AccountOperType operType) {
        this.operType = operType;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "OPER_DATE", nullable = false, length = 19)
    @NotNull
    public Date getOperDate() {
        return this.operDate;
    }

    public void setOperDate(Date operDate) {
        this.operDate = operDate;
    }


    @Column(name = "DESCRIPTION", length = 200)
    @Size(max = 200)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }


    @Column(name = "ADVANCE_RECEIVABLE", nullable = false, scale = 3)
    @NotNull
    public BigDecimal getAdvanceReceivable() {
        return advanceReceivable;
    }

    public void setAdvanceReceivable(BigDecimal advanceReceivable) {
        this.advanceReceivable = advanceReceivable;
    }

    @Column(name = "ACCOUNTS_RECEIVABLE", nullable = false, scale = 3)
    @NotNull
    public BigDecimal getAccountsReceivable() {
        return accountsReceivable;
    }

    public void setAccountsReceivable(BigDecimal accountsReceivable) {
        this.accountsReceivable = accountsReceivable;
    }


    @Column(name = "PROXY_ACCOUNTS_RECEIVABLE", nullable = false, scale = 3)
    @NotNull
    public BigDecimal getProxcAccountsReceiveable() {
        return proxcAccountsReceiveable;
    }

    public void setProxcAccountsReceiveable(BigDecimal proxcAccountsReceiveable) {
        this.proxcAccountsReceiveable = proxcAccountsReceiveable;
    }

    @ManyToOne(optional = true, fetch = FetchType.LAZY)
    @JoinColumn(name = "SAVEING", nullable = true)
    public MoneySave getMoneySave() {
        return moneySave;
    }

    public void setMoneySave(MoneySave moneySave) {
        this.moneySave = moneySave;
    }

    @Transient
    public BigDecimal getCustomerOperMoney() {
        switch (getOperType()) {

            case DEPOSIT_BACK:
                return getAdvanceReceivable();

            case PROXY_SAVINGS:
                return getProxcAccountsReceiveable();
            case CUSTOMER_SAVINGS:
                return getAdvanceReceivable().add(getAccountsReceivable());
            case DEPOSIT_PAY:
                return getAccountsReceivable();
            case MONEY_FREE:
                return getAccountsReceivable();
            case ORDER_PAY:
                return getAdvanceReceivable().add(getAccountsReceivable()).add(getProxcAccountsReceiveable());
            case ORDER_BACK:
                return getAccountsReceivable();

        }

        throw new IllegalArgumentException("unkonw operType:" + getOperType());
    }

    @Transient
    public void calcCustomerMoney() {
        switch (getOperType()) {

            case DEPOSIT_BACK:
                //getCustomer().setAdvanceMoney(getCustomer().getAdvanceMoney().subtract(getAdvanceReceivable()));
//                getCustomer().setAccountMoney(getCustomer().getAccountMoney().add(getAccountsReceivable()));
//                getCustomer().setAdvanceMoney(getCustomer().getAdvanceMoney().add(getAdvanceReceivable()));
//                getCustomer().setAccountMoney(getCustomer().getAccountMoney().add(getAccountsReceivable()));
                break;


            case PROXY_SAVINGS:
                getCustomer().setProxyAccountMoney(getCustomer().getProxyAccountMoney().subtract(getProxcAccountsReceiveable()));
                break;
            case CUSTOMER_SAVINGS:
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().subtract(getAccountsReceivable()));
                getCustomer().setAdvanceMoney(getCustomer().getAdvanceMoney().add(getAdvanceReceivable()));
                break;
            case DEPOSIT_PAY:
                getCustomer().setAdvanceMoney(getCustomer().getAdvanceMoney().subtract(getAdvanceReceivable()));
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().subtract(getAccountsReceivable()));
                break;
            case MONEY_FREE:
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().subtract(getAccountsReceivable()));
                break;
            case ORDER_PAY:
                getCustomer().setAdvanceMoney(getCustomer().getAdvanceMoney().subtract(getAdvanceReceivable()));
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().add(getAccountsReceivable()));
                getCustomer().setProxyAccountMoney(getCustomer().getProxyAccountMoney().add(getProxcAccountsReceiveable()));
                break;
            case ORDER_BACK:
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().subtract(getAccountsReceivable()));
                break;
        }
    }

    @Transient
    public void revertCustomerMoney() {
        switch (getOperType()) {


            case PROXY_SAVINGS:
                getCustomer().setProxyAccountMoney(getCustomer().getProxyAccountMoney().add(getProxcAccountsReceiveable()));
                break;
            case CUSTOMER_SAVINGS:
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().add(getAccountsReceivable()));
                getCustomer().setAdvanceMoney(getCustomer().getAdvanceMoney().subtract(getAdvanceReceivable()));
                break;
            case MONEY_FREE:
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().add(getAccountsReceivable()));
                break;
            case ORDER_PAY:
                getCustomer().setAdvanceMoney(getCustomer().getAdvanceMoney().add(getAdvanceReceivable()));
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().subtract(getAccountsReceivable()));
                getCustomer().setProxyAccountMoney(getCustomer().getProxyAccountMoney().subtract(getProxcAccountsReceiveable()));
                break;
            case ORDER_BACK:
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().add(getAccountsReceivable()));
                break;
            case DEPOSIT_PAY:
                getCustomer().setAdvanceMoney(getCustomer().getAdvanceMoney().add(getAdvanceReceivable()));
                getCustomer().setAccountMoney(getCustomer().getAccountMoney().add(getAccountsReceivable()));
                break;
        }
    }


}
