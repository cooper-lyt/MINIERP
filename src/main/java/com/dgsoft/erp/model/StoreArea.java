package com.dgsoft.erp.model;
// Generated Oct 1, 2013 5:41:32 PM by Hibernate Tools 4.0.0

import com.google.common.collect.Iterators;
import org.hibernate.annotations.GenericGenerator;

import java.util.*;
import javax.persistence.*;
import javax.swing.tree.TreeNode;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 * StoreArea generated by hbm2java
 */
@Entity
@Table(name = "STORE_AREA", catalog = "MINI_ERP")
public class StoreArea implements java.io.Serializable, TreeNode {

    private String id;
    private Store store;
    private StoreArea storeArea;
    private String name;
    private boolean enable;
    private String description;
    private Set<StoreArea> storeAreas = new HashSet<StoreArea>(0);

    private Set<Depositary> depositaries = new HashSet<Depositary>(0);

    public StoreArea() {
    }

    public StoreArea(String id, Store store, String name) {
        this.id = id;
        this.store = store;
        this.name = name;
    }

    public StoreArea(String id, Store store, StoreArea storeArea, String name,
                     Set<StoreArea> storeAreas) {
        this.id = id;
        this.store = store;
        this.storeArea = storeArea;
        this.name = name;
        this.storeAreas = storeAreas;
    }

    @Id
    @Column(name = "ID", unique = true, nullable = false, length = 32)
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid.hex")
    @NotNull
    @Size(max = 32)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @Column(name = "ENABLE", nullable = false)
    public boolean isEnable() {
        return this.enable;
    }

    public void setEnable(boolean enable) {
        this.enable = enable;
    }

    @Column(name = "DESCRIPTION", length = 200)
    @Size(max = 200)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "STORE", nullable = false)
    @NotNull
    public Store getStore() {
        return this.store;
    }

    public void setStore(Store store) {
        this.store = store;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "PARENT")
    public StoreArea getStoreArea() {
        return this.storeArea;
    }

    public void setStoreArea(StoreArea storeArea) {
        this.storeArea = storeArea;
    }

    @Column(name = "NAME", nullable = false, length = 50)
    @NotNull
    @Size(max = 50)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeArea", orphanRemoval = true, cascade = {CascadeType.ALL})
    public Set<StoreArea> getStoreAreas() {
        return this.storeAreas;
    }

    public void setStoreAreas(Set<StoreArea> storeAreas) {
        this.storeAreas = storeAreas;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeArea")
    public Set<Depositary> getDepositaries() {
        return this.depositaries;
    }

    public void setDepositaries(Set<Depositary> depositaries) {
        this.depositaries = depositaries;
    }

    @Transient
    public String getTitle(boolean containsStore){
        String result = getName();
        StoreArea area = this;
        while (area.getStoreArea() != null){
            area = area.getStoreArea();
            result = area.getName() + " > " + result;
        }
        if (containsStore){
            result = getStore().getName() + " : " + result;
        }
        return result;
    }

    @Transient
    public List<StoreArea> getStoreAreaList(boolean containsDisable) {
        List<StoreArea> result = new ArrayList<StoreArea>();
        for(StoreArea area: getStoreAreas()){
            if (containsDisable || area.isEnable()){
                result.add(area);
            }
        }
        Collections.sort(result, new Comparator<StoreArea>() {
            @Override
            public int compare(StoreArea o1, StoreArea o2) {
                return o1.getId().compareTo(o2.getId());
            }
        });
        return result;
    }

    @Override
    @Transient
    public TreeNode getChildAt(int childIndex) {
        return getStoreAreaList(false).get(childIndex);
    }

    @Override
    @Transient
    public int getChildCount() {
        return getStoreAreas().size();
    }

    @Override
    @Transient
    public TreeNode getParent() {
        return getStoreArea();
    }

    @Override
    @Transient
    public int getIndex(TreeNode node) {
        return getStoreAreaList(false).indexOf(node);
    }

    @Override
    @Transient
    public boolean getAllowsChildren() {
        return !getStoreAreas().isEmpty();
    }

    @Override
    @Transient
    public boolean isLeaf() {
        return getStoreAreas().isEmpty();
    }

    @Override
    @Transient
    public Enumeration children() {
        return Iterators.asEnumeration(getStoreAreaList(false).iterator());
    }
}
