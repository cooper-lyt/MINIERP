package com.dgsoft.erp.model;
// Generated Oct 1, 2013 5:41:32 PM by Hibernate Tools 4.0.0

import com.dgsoft.erp.action.StoreResFormatFilter;
import com.dgsoft.erp.action.StoreResHome;
import org.hibernate.annotations.GenericGenerator;

import java.util.*;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 * StoreRes generated by hbm2java
 */
@Entity
@Table(name = "STORE_RES", catalog = "MINI_ERP")
public class StoreRes implements java.io.Serializable {

    private String id;
    private Res res;
    private Set<StoreChangeItem> storeChangeItems = new HashSet<StoreChangeItem>(
            0);
    private Set<OrderList> orderLists = new HashSet<OrderList>(0);
    private Set<Inventory> inventories = new HashSet<Inventory>(0);
    private Set<Format> formats = new HashSet<Format>(0);

    public StoreRes() {
    }


    public StoreRes(Res res, Set<Format> formats) {
        this.res = res;
        this.formats = formats;
    }

    @Id
    @Column(name = "ID", unique = true, nullable = false, length = 32)
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid.hex")
    @NotNull
    @Size(max = 32)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "RES", nullable = false)
    @NotNull
    public Res getRes() {
        return this.res;
    }

    public void setRes(Res res) {
        this.res = res;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeRes")
    public Set<StoreChangeItem> getStoreChangeItems() {
        return this.storeChangeItems;
    }

    public void setStoreChangeItems(Set<StoreChangeItem> storeChangeItems) {
        this.storeChangeItems = storeChangeItems;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeRes")
    public Set<OrderList> getOrderLists() {
        return this.orderLists;
    }

    public void setOrderLists(Set<OrderList> orderLists) {
        this.orderLists = orderLists;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeRes")
    public Set<Inventory> getInventories() {
        return this.inventories;
    }

    public void setInventories(Set<Inventory> inventories) {
        this.inventories = inventories;
    }

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "storeRes", orphanRemoval = true, cascade = {CascadeType.ALL})
    public Set<Format> getFormats() {
        return this.formats;
    }

    public void setFormats(Set<Format> formats) {
        this.formats = formats;
    }

    @Transient
    public Format getFormat(String formatDefineId){
        for (Format format: getFormats()){
            if (format.getFormatDefine().getId().equals(formatDefineId)){
                return format;
            }
        }
        return null;
    }

    @Transient
    public String getTitle(){
        String result = "";
        for (Format format: getFormatList()){
            result += " " + format.getFormatDefine().getName() + ":" + format.getFormatValue();
        }
        return getRes().getName() + "(" + getRes().getCode() + ")" + result;

    }

    @Transient
    public List<Format> getFormatList(){
        List<Format> result = new ArrayList<Format>(getFormats());
        Collections.sort(result,new Comparator<Format>() {
            @Override
            public int compare(Format o1, Format o2) {
                return new Integer(o1.getFormatDefine().getPriority()).compareTo(o2.getFormatDefine().getPriority());
            }
        });
        return result;
    }

    @Override
    @Transient
    public boolean equals(Object obj){
        if (obj == null){
            return false;
        }
        if (!(obj instanceof StoreRes)){
            return false;
        }
        StoreRes other = (StoreRes) obj;
        if (!getRes().getId().equals(other.getRes().getId())){
            return false;
        }

        return StoreResHome.sameFormat(other.getFormats(), getFormats());
    }

    @Override
    @Transient
    public int hashCode(){
        String result = getRes().getId();
        for(Format format: getFormatList()){
            result += "_" + format.getFormatDefine().getId() + ":" + format.getFormatValue();
        }
        return result.hashCode();
    }

}
