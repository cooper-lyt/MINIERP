package com.dgsoft.erp.model;
// Generated Oct 1, 2013 5:41:32 PM by Hibernate Tools 4.0.0

import com.dgsoft.common.NamedEntity;
import com.dgsoft.common.system.DictionaryWord;
import com.dgsoft.common.utils.math.BigDecimalFormat;
import com.dgsoft.common.utils.persistence.UniqueVerify;
import com.dgsoft.erp.action.ResHelper;
import com.dgsoft.erp.action.store.StoreChangeHelper;
import com.dgsoft.erp.model.api.ResCount;
import org.hibernate.annotations.GenericGenerator;
import org.jboss.seam.international.StatusMessage;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.math.BigDecimal;
import java.util.*;

/**
 * StoreRes generated by hbm2java
 */
@Entity
@Table(name = "STORE_RES", catalog = "MINI_ERP", uniqueConstraints = @UniqueConstraint(columnNames = "CODE"))
@UniqueVerify(name = "code", severity = StatusMessage.Severity.ERROR, field = {"code"})
public class StoreRes implements NamedEntity, java.io.Serializable, Comparable<StoreRes> {

    private String id;
    private Res res;

    private Set<Format> formats = new HashSet<Format>(0);

    private String code;
    private BigDecimal storeWarn;
    private Integer expWarn;

    private BigDecimal floatConversionRate;

    private Set<StockChangeItem> stockChangeItems = new HashSet<StockChangeItem>(0);
    private Set<AllocationRes> allocationReses = new HashSet<AllocationRes>(0);
    private Set<OrderItem> orderItems = new HashSet<OrderItem>(0);
    private Set<DispatchItem> dispatchItems = new HashSet<DispatchItem>(0);
    private Set<OverlyOut> overlyOuts = new HashSet<OverlyOut>(0);

    private Set<Stock> stocks = new HashSet<Stock>(0);
    private Set<PrepareStockChange> prepareStockChanges = new HashSet<PrepareStockChange>(0);
    private Set<Batch> batches = new HashSet<Batch>(0);
    private boolean enable;

    public StoreRes() {
        enable = true;
    }


    public StoreRes(Res res, Set<Format> formats) {
        this.res = res;
        this.formats = formats;
        enable = true;
    }

    public StoreRes(String code, boolean enable) {
        this.code = code;
        this.enable = enable;

    }

    @Id
    @Column(name = "ID", unique = true, nullable = false, length = 32)
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid.hex")
    @NotNull
    @Size(max = 32)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "RES", nullable = false)
    @NotNull
    public Res getRes() {
        return this.res;
    }

    public void setRes(Res res) {
        this.res = res;
    }

    @Column(name = "CODE", nullable = false, length = 50)
    @NotNull
    @Size(max = 50)
    public String getCode() {
        return this.code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    @Column(name = "ENABLE", nullable = false)
    public boolean isEnable() {
        return enable;
    }

    public void setEnable(boolean enable) {
        this.enable = enable;
    }

    @Column(name = "STORE_WARN", scale = 4)
    public BigDecimal getStoreWarn() {
        return this.storeWarn;
    }

    public void setStoreWarn(BigDecimal storeWarn) {
        this.storeWarn = storeWarn;
    }

    @Column(name = "EXP_WARN")
    public Integer getExpWarn() {
        return this.expWarn;
    }

    public void setExpWarn(Integer expWarn) {
        this.expWarn = expWarn;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeRes")
    public Set<StockChangeItem> getStockChangeItems() {
        return this.stockChangeItems;
    }

    public void setStockChangeItems(Set<StockChangeItem> stockChangeItems) {
        this.stockChangeItems = stockChangeItems;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeRes")
    public Set<PrepareStockChange> getPrepareStockChanges() {
        return prepareStockChanges;
    }

    public void setPrepareStockChanges(Set<PrepareStockChange> prepareStockChanges) {
        this.prepareStockChanges = prepareStockChanges;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeRes")
    public Set<Stock> getStocks() {
        return stocks;
    }

    public void setStocks(Set<Stock> stocks) {
        this.stocks = stocks;
    }

    @OneToMany(orphanRemoval = true, fetch = FetchType.LAZY, mappedBy = "storeRes", cascade = {CascadeType.ALL})
    public Set<Format> getFormats() {
        return this.formats;
    }

    public void setFormats(Set<Format> formats) {
        this.formats = formats;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeRes")
    public Set<AllocationRes> getAllocationReses() {
        return this.allocationReses;
    }

    public void setAllocationReses(Set<AllocationRes> allocationReses) {
        this.allocationReses = allocationReses;
    }

    @Column(name = "FLOAT_CONVERSION_RATE", scale = 10)
    public BigDecimal getFloatConversionRate() {
        return this.floatConversionRate;
    }

    public void setFloatConversionRate(BigDecimal floatConversionRate) {
        this.floatConversionRate = floatConversionRate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeRes")
    public Set<OrderItem> getOrderItems() {
        return this.orderItems;
    }

    public void setOrderItems(Set<OrderItem> orderItems) {
        this.orderItems = orderItems;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeRes")
    public Set<OverlyOut> getOverlyOuts() {
        return overlyOuts;
    }

    public void setOverlyOuts(Set<OverlyOut> overlyOuts) {
        this.overlyOuts = overlyOuts;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeRes")
    public Set<DispatchItem> getDispatchItems() {
        return dispatchItems;
    }

    public void setDispatchItems(Set<DispatchItem> dispatchItems) {
        this.dispatchItems = dispatchItems;
    }

    @OneToMany(fetch= FetchType.LAZY,mappedBy = "storeRes")
    public Set<Batch> getBatches() {
        return batches;
    }

    public void setBatches(Set<Batch> batches) {
        this.batches = batches;
    }

    @Transient
    public List<Stock> getVaildStockList() {
        List<Stock> result = new ArrayList<Stock>();
        for (Stock stock : getStocks()) {
            if (stock.getCount().compareTo(BigDecimal.ZERO) > 0) {
                result.add(stock);
            }
        }

        Collections.sort(result, new Comparator<Stock>() {
            @Override
            public int compare(Stock o1, Stock o2) {
                return o1.getStore().getId().compareTo(o2.getStore().getId());
            }
        });
        return result;
    }

    @Transient
    public ResCount getResCount(BigDecimal count, ResUnit unit) {
        if (getRes().getUnitGroup().getType().equals(UnitGroup.UnitGroupType.FLOAT_CONVERT)) {
            return new ResCount(count, unit, getFloatConversionRate());
        } else {
            return new ResCount(count, unit);
        }
    }

    @Transient
    public ResCount getResCount(BigDecimal count) {
        return getResCount(count, getRes().getUnitGroup().getMasterUnit());
    }

    @Transient
    public ResCount getTotalCount() {
        ResCount resCount = null;
        for (Stock stock : getVaildStockList()) {
            if (resCount == null) {
                resCount = stock.getResCount();
            } else
                resCount.add(stock.getResCount());
        }
        if (resCount == null) {
            return getResCount(BigDecimal.ZERO);
        } else {
            return resCount;
        }
    }

    @Transient
    public Format getFormat(String formatDefineId) {
        for (Format format : getFormats()) {
            if (format.getFormatDefine().getId().equals(formatDefineId)) {
                return format;
            }
        }
        return null;
    }

    @Transient
    public List<Format> getFormatList() {
        List<Format> result = new ArrayList<Format>(getFormats());
        Collections.sort(result, new Comparator<Format>() {
            @Override
            public int compare(Format o1, Format o2) {
                return new Integer(o1.getFormatDefine().getPriority()).compareTo(o2.getFormatDefine().getPriority());
            }
        });

        return result;
    }

    @Transient
    public Map<FormatDefine, Format> getFormatMap(){
        Map<FormatDefine, Format> result = new HashMap<FormatDefine, Format>();
        for (Format format : getFormats()){
            result.put(format.getFormatDefine(),format);
        }
        return result;
    }

    @Transient
    public String getDisplayFloatRate() {
        return BigDecimalFormat.format(getFloatConversionRate(), getRes().getUnitGroup().getFloatConvertRateFormat()) + getRes().getUnitGroup().getName();
    }

    @Override
    @Transient
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof StoreRes)) {
            return false;
        }
        StoreRes other = (StoreRes) obj;

        if ((getId() != null) && (!"".equals(getId().trim()))) {
            return getId().equals(other.getId());
        }

        if (!getRes().getId().equals(other.getRes().getId())) {
            return false;
        }

        return ResHelper.sameFormat(other.getFormats(), getFormats())
                && (!getRes().getUnitGroup().getType().equals(UnitGroup.UnitGroupType.FLOAT_CONVERT)
                || getFloatConversionRate().equals(other.getFloatConversionRate()));
    }

    @Override
    @Transient
    public int hashCode() {
        if ((getId() != null) && (!"".equals(getId().trim()))) {
            return getId().hashCode();
        }

        String result = getRes().getId();
        for (Format format : getFormatList()) {
            result += "_" + format.getFormatDefine().getId() + ":" + format.getFormatValue();
        }
        return result.hashCode();
    }

    @Override
    @Transient
    public int compareTo(StoreRes o) {
        int result = getRes().getId().compareTo(o.getRes().getId());
        if (result == 0) {
            result = o.getId().compareTo(getId());
        }
        return result;
    }

    @Transient
    @Override
    public String getName() {
        return null;
    }

//
//    public String getTitle(DictionaryWord dictionary) {
//        String result = getRes().getName() + "(" + getCode() + ")" + " ";
//
//        for (Format format : getFormatList()) {
//            result += format.getFormatDefine().getName() + ":";
//            if (format.getFormatDefine().getDataType().equals(FormatDefine.FormatType.WORD)) {
//                result += dictionary.getWordValue(format.getFormatValue()) + " ";
//            } else {
//                result += format.getFormatValue() + " ";
//            }
//        }
//
//        if (getRes().getUnitGroup().getType().equals(UnitGroup.UnitGroupType.FLOAT_CONVERT)) {
//            result += BigDecimalFormat.format(getFloatConversionRate(),
//                    getRes().getUnitGroup().getFloatConvertRateFormat()).toString();
//            result += getRes().getUnitGroup().getName();
//        }
//
//        return result;
//
//
//    }
}
