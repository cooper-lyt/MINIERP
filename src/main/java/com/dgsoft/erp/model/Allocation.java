package com.dgsoft.erp.model;
// Generated Oct 17, 2013 5:33:51 PM by Hibernate Tools 4.0.0

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * Allocation generated by hbm2java
 */
@Entity
@Table(name = "ALLOCATION", catalog = "MINI_ERP")
public class Allocation implements java.io.Serializable {

    public enum AllocationType{
        ALLOCATION_APPLY,ALLOCATION;
    }

    public enum AllocationState{
        WAITING_OUT,WAITING_IN,ALLOCATION_COMPLETE,ALLOCATION_CANCEL;
    }

    private String id;
    private Store inStore;
    private StockChange stockChangeByStoreIn;
    private Store outStore;
    private StockChange stockChangeByStoreOut;
    private String applyEmp;
    private String reason;
    private String memo;
    private AllocationState state;
    private AllocationType allocationType;
    private Date createDate;
    private Set<AllocationRes> allocationReses = new HashSet<AllocationRes>(0);

    public Allocation() {
    }

    public Allocation(String id, Store inStore,
                      Store outStore, String applyEmp, String reason,
                      AllocationState state, Date createDate) {
        this.id = id;
        this.inStore = inStore;
        this.outStore = outStore;
        this.applyEmp = applyEmp;
        this.reason = reason;
        this.state = state;
        this.createDate = createDate;
    }


    @Id
    @Column(name = "ID", unique = true, nullable = false, length = 32)
    @NotNull
    @Size(max = 32)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "TARGET_STORE", nullable = false)
    @NotNull
    public Store getInStore() {
        return this.inStore;
    }

    public void setInStore(Store storeByTargetStore) {
        this.inStore = storeByTargetStore;
    }

    @OneToOne(optional = true, fetch = FetchType.LAZY)
    @JoinColumn(name = "STORE_IN", nullable = true)
    public StockChange getStockChangeByStoreIn() {
        return this.stockChangeByStoreIn;
    }

    public void setStockChangeByStoreIn(StockChange stockChangeByStoreIn) {
        this.stockChangeByStoreIn = stockChangeByStoreIn;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "APPLY_STORE", nullable = false)
    @NotNull
    public Store getOutStore() {
        return this.outStore;
    }

    public void setOutStore(Store storeByApplyStore) {
        this.outStore = storeByApplyStore;
    }

    @OneToOne(optional = true, fetch = FetchType.LAZY)
    @JoinColumn(name = "STORE_OUT", nullable = true)
    public StockChange getStockChangeByStoreOut() {
        return this.stockChangeByStoreOut;
    }

    public void setStockChangeByStoreOut(StockChange stockChangeByStoreOut) {
        this.stockChangeByStoreOut = stockChangeByStoreOut;
    }

    @Column(name = "APPLY_EMP", nullable = false, length = 32)
    @NotNull
    @Size(max = 32)
    public String getApplyEmp() {
        return this.applyEmp;
    }

    public void setApplyEmp(String applyEmp) {
        this.applyEmp = applyEmp;
    }

    @Enumerated(EnumType.STRING)
    @Column(name = "TYPE",nullable = false,length = 32)
    public AllocationType getAllocationType() {
        return allocationType;
    }

    public void setAllocationType(AllocationType allocationType) {
        this.allocationType = allocationType;
    }

    @Column(name = "REASON", nullable = false, length = 32)
    @NotNull
    @Size(max = 32)
    public String getReason() {
        return this.reason;
    }

    public void setReason(String reason) {
        this.reason = reason;
    }

    @Column(name = "MEMO", length = 200)
    @Size(max = 200)
    public String getMemo() {
        return this.memo;
    }

    public void setMemo(String memo) {
        this.memo = memo;
    }

    @Enumerated(EnumType.STRING)
    @Column(name = "STATE", nullable = false, length = 20)
    @NotNull
    @Size(max = 20)
    public AllocationState getState() {
        return this.state;
    }

    public void setState(AllocationState state) {
        this.state = state;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "CREATE_DATE", nullable = false, length = 19, columnDefinition = "DATETIME")
    @NotNull
    public Date getCreateDate() {
        return this.createDate;
    }

    public void setCreateDate(Date createDate) {
        this.createDate = createDate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "allocation")
    public Set<AllocationRes> getAllocationReses() {
        return this.allocationReses;
    }

    public void setAllocationReses(Set<AllocationRes> allocationReses) {
        this.allocationReses = allocationReses;
    }

}
