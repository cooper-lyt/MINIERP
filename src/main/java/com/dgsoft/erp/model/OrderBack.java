package com.dgsoft.erp.model;
// Generated Oct 17, 2013 5:33:51 PM by Hibernate Tools 4.0.0

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * OrderBack generated by hbm2java
 */
@Entity
@Table(name = "ORDER_BACK", catalog = "MINI_ERP")
public class OrderBack implements java.io.Serializable {

    public enum OrderBackType{
        ALL_ORDER_CANCEL,PART_ORDER_BACK;
    }


	private String id;
	private Integer version;
	private CustomerOrder customerOrder;
	private String reason;
	private Date createDate;
    private BigDecimal money;
	private String memo;

    private OrderBackType orderBackType;
    private boolean moneyComplete;
    private boolean resComplete;
    private String applyEmp;

    private boolean needBackMoney;
    private boolean needBackRes;

    private BigDecimal saveMoney;

    private Set<BackItem> backItems = new HashSet<BackItem>(0);



	private Set<ProductBackStoreIn> productBackStoreIn = new HashSet<ProductBackStoreIn>(0);

	private AccountOper accountOper;



	public OrderBack() {
	}

	public OrderBack(String id, CustomerOrder customerOrder, String state,
			String reason, Date createDate, Date completeDate) {
		this.id = id;
		this.customerOrder = customerOrder;
		this.reason = reason;
		this.createDate = createDate;
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, length = 32)
	@NotNull
	@Size(max = 32)
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@Version
	@Column(name = "VERSION")
	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	@OneToOne(optional = false,fetch = FetchType.LAZY)
	@JoinColumn(name = "CUSTOMER_ORDER", nullable = false)
	@NotNull
	public CustomerOrder getCustomerOrder() {
		return this.customerOrder;
	}

	public void setCustomerOrder(CustomerOrder customerOrder) {
		this.customerOrder = customerOrder;
	}

	@Column(name = "REASON", nullable = false, length = 32)
	@NotNull
	@Size(max = 32)
	public String getReason() {
		return this.reason;
	}

	public void setReason(String reason) {
		this.reason = reason;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATE_DATE", nullable = false, length = 19,columnDefinition = "DATETIME")
	@NotNull
	public Date getCreateDate() {
		return this.createDate;
	}

	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

	@Column(name = "MEMO", length = 200)
	@Size(max = 200)
	public String getMemo() {
		return this.memo;
	}

	public void setMemo(String memo) {
		this.memo = memo;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "orderBack")
	public Set<ProductBackStoreIn> getProductBackStoreIn() {
		return this.productBackStoreIn;
	}

	public void setProductBackStoreIn(Set<ProductBackStoreIn> productBackReses) {
		this.productBackStoreIn = productBackReses;
	}

    @OneToOne(optional = true, fetch = FetchType.LAZY,cascade = {CascadeType.ALL})
    @JoinColumn(name = "BACK_MONEY", nullable = true)
    public AccountOper getAccountOper() {
		return this.accountOper;
	}

	public void setAccountOper(AccountOper backMoneys) {
		this.accountOper = backMoneys;
	}

    @Enumerated(EnumType.STRING)
    @Column(name="BACK_TYPE",nullable = false,length = 32)
    @NotNull
    public OrderBackType getOrderBackType() {
        return orderBackType;
    }

    public void setOrderBackType(OrderBackType orderBackType) {
        this.orderBackType = orderBackType;
    }

    @Column(name="MONEY_COMPLETE",nullable = false)
    public boolean isMoneyComplete() {
        return moneyComplete;
    }

    public void setMoneyComplete(boolean moneyComplete) {
        this.moneyComplete = moneyComplete;
    }

    @Column(name="RES_COMPLETE",nullable = false)
    public boolean isResComplete() {
        return resComplete;
    }

    public void setResComplete(boolean resComplete) {
        this.resComplete = resComplete;
    }

    @Column(name = "APPLY_EMP",nullable = false,length = 32)
    @NotNull
    @Size(max = 32)
    public String getApplyEmp() {
        return applyEmp;
    }

    public void setApplyEmp(String applyEmp) {
        this.applyEmp = applyEmp;
    }

    @Column(name = "MONEY", nullable = false, scale = 3)
    @NotNull
    public BigDecimal getMoney() {
        return money;
    }

    public void setMoney(BigDecimal money) {
        this.money = money;
    }

    @OneToMany(fetch = FetchType.LAZY,mappedBy = "orderBack",orphanRemoval = true)
    public Set<BackItem> getBackItems() {
        return backItems;
    }

    public void setBackItems(Set<BackItem> backItems) {
        this.backItems = backItems;
    }

    @Column(name="NEED_BACK_MONEY",nullable = false)
    public boolean isNeedBackMoney() {
        return needBackMoney;
    }

    public void setNeedBackMoney(boolean needBackMoney) {
        this.needBackMoney = needBackMoney;
    }

    @Column(name="NEED_BACK_RES",nullable = false)
    public boolean isNeedBackRes() {
        return needBackRes;
    }

    public void setNeedBackRes(boolean needBackRes) {
        this.needBackRes = needBackRes;
    }

    @Column(name = "SAVE_MONEY",nullable = false)
    public BigDecimal getSaveMoney() {
        return saveMoney;
    }

    public void setSaveMoney(BigDecimal saveMoney) {
        this.saveMoney = saveMoney;
    }
}
