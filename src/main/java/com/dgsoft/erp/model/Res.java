package com.dgsoft.erp.model;
// Generated Sep 25, 2013 4:34:50 PM by Hibernate Tools 4.0.0

import com.dgsoft.common.OrderBeanComparator;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.*;

/**
 * Res generated by hbm2java
 */
@Entity
@Table(name = "RES", catalog = "MINI_ERP", uniqueConstraints = @UniqueConstraint(columnNames = "CODE"))
public class Res implements java.io.Serializable {

	private String id;
	private ResCategory resCategory;
	private String name;
	private String description;
    private String code;
	private boolean enable;
    private boolean batchMgr;
	private Set<StoreRes> storeReses = new HashSet<StoreRes>(0);
	private Set<FormatDefine> formatDefines = new HashSet<FormatDefine>(0);
    private Set<Batch> batches = new HashSet<Batch>(0);
    private Set<OrderItem> orderItems = new HashSet<OrderItem>(0);
    private Accounting accounting;

    private ResUnit resUnitByInDefault;
    private ResUnit resUnitByMasterUnit;
    private ResUnit resUnitByOutDefault;

    private UnitGroup unitGroup;

    private Set<Supplier> suppliers = new HashSet<Supplier>(0);

    private Set<ProductGroup> productGroups = new HashSet<ProductGroup>(0);

	public Res() {
	}

    public Res(boolean enable) {
        this.enable = enable;
    }

	public Res(String code, boolean enable) {
		this.code = code;
		this.enable = enable;
	}


	@Id
	@Column(name = "ID", unique = true, nullable = false, length = 32)
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid.hex")
	@NotNull
	@Size(max = 32)
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "IN_DEFAULT", nullable = false)
    @NotNull
    public ResUnit getResUnitByInDefault() {
        return this.resUnitByInDefault;
    }

    public void setResUnitByInDefault(ResUnit resUnitByInDefault) {
        this.resUnitByInDefault = resUnitByInDefault;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "MASTER_UNIT", nullable = false)
    @NotNull
    public ResUnit getResUnitByMasterUnit() {
        return this.resUnitByMasterUnit;
    }

    public void setResUnitByMasterUnit(ResUnit resUnitByMasterUnit) {
        this.resUnitByMasterUnit = resUnitByMasterUnit;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "OUT_DEFAULT", nullable = false)
    @NotNull
    public ResUnit getResUnitByOutDefault() {
        return this.resUnitByOutDefault;
    }

    public void setResUnitByOutDefault(ResUnit resUnitByOutDefault) {
        this.resUnitByOutDefault = resUnitByOutDefault;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "UNIT_GROUP", nullable = false)
    @NotNull
    public UnitGroup getUnitGroup() {
        return this.unitGroup;
    }

    public void setUnitGroup(UnitGroup unitGroup) {
        this.unitGroup = unitGroup;
    }


	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CATEGORY", nullable = false)
	@NotNull
	public ResCategory getResCategory() {
		return this.resCategory;
	}

	public void setResCategory(ResCategory resCategory) {
		this.resCategory = resCategory;
	}

    @Column(name = "CODE", nullable = false, length = 50)
    @NotNull
    @Size(max = 50)
    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    @Column(name = "NAME", nullable = false, length = 50)
	@NotNull
	@Size(max = 50)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "res")
    public Set<Batch> getBatches() {
        return this.batches;
    }

    public void setBatches(Set<Batch> batches) {
        this.batches = batches;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "res")
    public Set<OrderItem> getOrderItems() {
        return orderItems;
    }

    public void setOrderItems(Set<OrderItem> orderItems) {
        this.orderItems = orderItems;
    }

    @Column(name = "DESCRIPTION", length = 200)
	@Size(max = 200)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "ENABLE", nullable = false)
	public boolean isEnable() {
		return this.enable;
	}

	public void setEnable(boolean enable) {
		this.enable = enable;
	}

    @Column(name = "BATCH_MGR", nullable = false)
    public boolean isBatchMgr() {
        return batchMgr;
    }

    public void setBatchMgr(boolean batchMgr) {
        this.batchMgr = batchMgr;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "res")
	public Set<StoreRes> getStoreReses() {
		return this.storeReses;
	}

	public void setStoreReses(Set<StoreRes> storeReses) {
		this.storeReses = storeReses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "res", orphanRemoval = true, cascade = {CascadeType.ALL})
	public Set<FormatDefine> getFormatDefines() {
		return this.formatDefines;
	}

	public void setFormatDefines(Set<FormatDefine> formatDefines) {
		this.formatDefines = formatDefines;
	}

    @Transient
    public List<StoreRes> getStoreResList(){
        List<StoreRes> result = new ArrayList<StoreRes>(getStoreReses());
        Collections.sort(result,new Comparator<StoreRes>() {
            @Override
            public int compare(StoreRes o1, StoreRes o2) {
                return o1.getCode().compareTo(o2.getCode());
            }
        });
        return result;
    }

    @Transient
    public List<FormatDefine> getFormatDefineList(){
        List<FormatDefine> result = new ArrayList<FormatDefine>(getFormatDefines());
        Collections.sort(result, OrderBeanComparator.getInstance());
        return result;
    }

    @ManyToMany(fetch = FetchType.LAZY, mappedBy = "reses",cascade = {CascadeType.PERSIST,CascadeType.REFRESH,CascadeType.MERGE})
    public Set<Supplier> getSuppliers() {
        return this.suppliers;
    }

    public void setSuppliers(Set<Supplier> supplierReses) {
        this.suppliers = supplierReses;
    }

    @OneToOne(optional = true, fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)
    @JoinColumn(name = "ACCOUNTING", unique = true, nullable = true, updatable = false)
    public Accounting getAccounting() {
        return accounting;
    }

    public void setAccounting(Accounting accounting) {
        this.accounting = accounting;
    }

    @ManyToMany(fetch = FetchType.LAZY,mappedBy = "reses")
    public Set<ProductGroup> getProductGroups() {
        return productGroups;
    }

    public void setProductGroups(Set<ProductGroup> productGroups) {
        this.productGroups = productGroups;
    }

    @Override
    @Transient
    public boolean equals(Object other){
        if (other == null){
            return false;
        }
        if (other == this){
            return true;
        }

        if (!(other instanceof Res)){
            return false;
        }

        Res otherRes = (Res) other;

        if ((otherRes.id != null) && (!"".equals(otherRes.id.trim()))){
           return otherRes.id.equals(id);
        }

        if (otherRes.code != null && (!"".equals(otherRes.code.trim()))){
            return otherRes.code.equals(code);
        }

        return false;
    }

    @Override
    @Transient
    public int hashCode(){
        return (id + code).hashCode();
    }

}
