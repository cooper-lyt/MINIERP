package com.dgsoft.erp.model;
// Generated Sep 25, 2013 4:34:50 PM by Hibernate Tools 4.0.0

import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.math.BigDecimal;

/**
 * Format generated by hbm2java
 */
@Entity
@Table(name = "FORMAT", catalog = "MINI_ERP")
public class Format implements java.io.Serializable {

    private String id;
    private StoreRes storeRes;
    private FormatDefine formatDefine;
    private String formatValue;

    public Format() {
    }

    public Format(FormatDefine formatDefine) {
        this.formatDefine = formatDefine;
    }

    @Id
    @Column(name = "ID", unique = true, nullable = false, length = 32)
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid.hex")
    @NotNull
    @Size(max = 32)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "STORE_RES", nullable = false)
    @NotNull
    public StoreRes getStoreRes() {
        return this.storeRes;
    }

    public void setStoreRes(StoreRes storeRes) {
        this.storeRes = storeRes;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "DEFINE", nullable = false)
    @NotNull
    public FormatDefine getFormatDefine() {
        return this.formatDefine;
    }

    public void setFormatDefine(FormatDefine formatDefine) {
        this.formatDefine = formatDefine;
    }

    @Column(name = "FORMAT_VALUE", nullable = false, length = 500)
    @Size(max = 500)
    public String getFormatValue() {
        return this.formatValue;
    }

    public void setFormatValue(String formatValue) {
        this.formatValue = formatValue;
    }


    @Transient
    public Integer getIntValue() {
        String result = getFormatValue();
        if (getFormatDefine().getDataType().equals(FormatDefine.FormatType.INTEGER) &&
                (result != null) && (!result.trim().equals(""))) {
            return Integer.parseInt(result);
        } else {
            return null;
        }
    }

    @Transient
    public void setIntValue(Integer value) {
        if (value != null) {
            setFormatValue(String.valueOf(value));
        } else {
            setFormatValue(null);
        }
    }

    @Transient
    public BigDecimal getFloatValue() {
        String result = getFormatValue();
        if (getFormatDefine().getDataType().equals(FormatDefine.FormatType.FLOAT) &&
                (result != null) && (!result.trim().equals(""))) {

            return new BigDecimal(result);

        } else
            return null;
    }

    @Transient
    public void setFloatValue(BigDecimal value) {
        if (value != null) {
            setFormatValue(value.toPlainString());
        }else{
            setFormatValue(null);
        }
    }


}
