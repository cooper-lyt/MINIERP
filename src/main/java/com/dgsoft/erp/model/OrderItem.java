package com.dgsoft.erp.model;
// Generated Oct 30, 2013 3:06:10 PM by Hibernate Tools 4.0.0

import com.dgsoft.erp.ResFormatCache;
import com.dgsoft.erp.action.ResHelper;
import com.dgsoft.erp.model.api.StoreResPriceEntity;
import org.hibernate.annotations.GenericGenerator;
import org.jboss.seam.log.Logging;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.math.BigDecimal;
import java.util.*;

/**
 * OrderItem generated by hbm2java
 */
@Entity
@Table(name = "ORDER_ITEM", catalog = "MINI_ERP")
public class OrderItem extends StoreResPriceEntity
        implements java.io.Serializable {


    public enum OrderItemStatus {

        CREATED, DISPATCHED, WAIT_PRICE, COMPLETED, REMOVED;

    }

    private String id;
    private StoreRes storeRes;
    private ResUnit middleUnit;
    private ResUnit resUnit;
    private NeedRes needRes;
    private BigDecimal count;
    private BigDecimal money;
    private BigDecimal middleMoney;
    private BigDecimal middleRate;
    private OrderItemRebate.ItemRebateModel middleMoneyCalcType;
    private boolean presentation;
    private String memo;

    private Dispatch dispatch;
    private OrderItemStatus status;

    private boolean overlyOut;
    private BigDecimal needConvertRate;
    private BigDecimal totalMoney;
    private BigDecimal rebate;
    private BigDecimal needMoney;
    private BigDecimal needCount;

    public OrderItem() {

    }



    public OrderItem(Res res) {
        super(res, res.getResUnitByOutDefault());
        if (res.getUnitGroup().getType().equals(UnitGroup.UnitGroupType.FLOAT_CONVERT))
            needConvertRate = res.getUnitGroup().getFloatAuxiliaryUnit().getConversionRate();
        rebate = new BigDecimal("100");
    }

    public OrderItem(StoreRes storeRes) {
        super(storeRes, storeRes.getRes().getResUnitByOutDefault());
        needConvertRate = storeRes.getFloatConversionRate();
        rebate = new BigDecimal("100");
    }

    @Override
    @Transient
    public String getType() {
        return "sale";
    }

    //    //create by recreate order
    public OrderItem(NeedRes needRes, StoreRes storeRes, ResUnit resUnit, BigDecimal count,
                     BigDecimal money, BigDecimal rebate, boolean presentation,
                     String memo, BigDecimal needConvertRate) {
        this.needRes = needRes;
        this.storeRes = storeRes;
        this.resUnit = resUnit;
        this.count = count;
        this.money = money;
        this.rebate = rebate;
        this.presentation = presentation;
        this.memo = memo;

        this.needConvertRate = needConvertRate;
        this.status = OrderItemStatus.CREATED;
        overlyOut = false;
        calcMoney();
    }

    //
//    //create Dispatch split item
    public OrderItem(Dispatch dispatch, StoreRes storeRes, BigDecimal count, BigDecimal money,
                     BigDecimal rebate, ResUnit resUnit, boolean presentation, String memo, BigDecimal needConvertRate) {
        this.dispatch = dispatch;
        this.needRes = dispatch.getNeedRes();
        this.storeRes = storeRes;
        this.count = count;
        this.money = money;
        this.resUnit = resUnit;
        this.presentation = presentation;
        this.memo = memo;
        this.status = OrderItemStatus.CREATED;
        this.overlyOut = false;
        this.needConvertRate = needConvertRate;
        this.rebate = rebate;
        calcMoney();

    }

    //    //create OverlyOut Item
    public OrderItem(Dispatch dispatch, StoreRes storeRes) {
        this.dispatch = dispatch;
        this.needRes = dispatch.getNeedRes();
        this.storeRes = storeRes;
        count = BigDecimal.ZERO;
        status = OrderItemStatus.DISPATCHED;
        overlyOut = true;
        needConvertRate = storeRes.getFloatConversionRate();
        presentation = false;
        resUnit = storeRes.getRes().getResUnitByOutDefault();
        rebate = new BigDecimal("100");
    }

    //
    // oweOut convert to orderItem
    public OrderItem(StoreRes storeRes, BigDecimal count, boolean presentation,
                     OrderItemStatus status, boolean overlyOut, String memo, BigDecimal needConvertRate) {
        this.storeRes = storeRes;
        this.count = count;
        this.presentation = presentation;
        this.memo = memo;
        this.status = status;
        this.overlyOut = overlyOut;
        this.needConvertRate = needConvertRate;
        rebate = new BigDecimal("100");
    }



    @Transient
    public BigDecimal getNeedAddCount(){
        if ((getCount() == null) || (getNeedCount() == null)){
            return BigDecimal.ZERO;
        }
        if (getRes().getUnitGroup().getType().equals(UnitGroup.UnitGroupType.FLOAT_CONVERT)){
            return getAuxCount().subtract(getNeedCount());
        }
        return null;
    }

    @Override
    public void setFree(boolean free) {
        super.setFree(free);
        if (free) {
            setNeedMoney(BigDecimal.ZERO);
        }
    }

    @Override
    @Transient
    public void setFloatConvertRate(BigDecimal floatConvertRate) {
        if ((getNeedConvertRate() == null) || getNeedConvertRate().compareTo(getFloatConvertRate()) == 0) {
            setInputNeedConvertRate(floatConvertRate);
        }
        super.setFloatConvertRate(floatConvertRate);
    }

    @Override
    protected void calcTotalMoney() {
        super.calcTotalMoney();
        calcNeedMoney();
    }

    @Override
    public void calcMoney() {
        if (getRes().getUnitGroup().getType().equals(UnitGroup.UnitGroupType.FLOAT_CONVERT) &&
                (getNeedConvertRate() == null) && !getUseUnit().isMasterUnit()) {

            Logging.getLog(getClass()).warn("param not enough can't calc");
            setTotalMoney(BigDecimal.ZERO);
            return;
        }
        super.calcMoney();
    }

    @Transient
    private void calcNeedMoney() {

        if (getRes().getUnitGroup().getType().equals(UnitGroup.UnitGroupType.FLOAT_CONVERT) &&
                (getMoney() != null) && (getCount() != null) && (!getUseUnit().isMasterUnit())) {

            setNeedMoney(calcAuxCount(getCount(), getNeedConvertRate(),
                    getRes().getUnitGroup().getFloatAuxiliaryUnit().getCountFormate()).multiply(getRebateUnitPrice()));

            setNeedCount(calcAuxCount(getCount(), getNeedConvertRate(),
                    getRes().getUnitGroup().getFloatAuxiliaryUnit().getCountFormate()));
        } else {
            setNeedMoney(getTotalMoney());
            setNeedCount(getUseUnitCount());
        }

    }

    @Transient
    public void setInputNeedConvertRate(BigDecimal floatConvertRate) {
        setNeedConvertRate(floatConvertRate);
        calcNeedMoney();
    }

    @Transient
    public BigDecimal getInputNeedConvertRate() {
        return getNeedConvertRate();
    }

    @Id
    @Column(name = "ID", unique = true, nullable = false, length = 32)
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid.hex")
    @NotNull
    @Size(max = 32)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @ManyToOne(optional = true, fetch = FetchType.LAZY)
    @JoinColumn(name = "STORE_RES", nullable = true)
    public StoreRes getStoreRes() {
        return this.storeRes;
    }

    public void setStoreRes(StoreRes storeRes) {
        this.storeRes = storeRes;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "MIDDLE_UNIT", nullable = true)
    public ResUnit getMiddleUnit() {
        return middleUnit;
    }

    public void setMiddleUnit(ResUnit middleUnit) {
        this.middleUnit = middleUnit;
    }


    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "MONEY_UNIT", nullable = false)
    @NotNull
    public ResUnit getResUnit() {
        return resUnit;
    }

    public void setResUnit(ResUnit moneyUnit) {
        this.resUnit = moneyUnit;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "NEED_RES", nullable = false)
    @NotNull
    public NeedRes getNeedRes() {
        return this.needRes;
    }

    public void setNeedRes(NeedRes needRes) {
        this.needRes = needRes;
    }

    @Column(name = "COUNT", nullable = false, scale = 4)
    @NotNull
    public BigDecimal getCount() {
        return this.count;
    }

    public void setCount(BigDecimal count) {
        this.count = count;
    }

    @Column(name = "MONEY", nullable = true, scale = 3)
    public BigDecimal getMoney() {
        return this.money;
    }

    public void setMoney(BigDecimal money) {
        this.money = money;
    }

    @Column(name = "MIDDLE_MONEY", nullable = true, scale = 3)
    public BigDecimal getMiddleMoney() {
        return this.middleMoney;
    }

    public void setMiddleMoney(BigDecimal middleMoney) {
        this.middleMoney = middleMoney;
    }

    @Column(name = "MIDDLE_RATE", nullable = true, scale = 6)
    public BigDecimal getMiddleRate() {
        return this.middleRate;
    }

    public void setMiddleRate(BigDecimal middleRate) {
        this.middleRate = middleRate;
    }

    @Enumerated(EnumType.STRING)
    @Column(name = "MIDDLE_CALC_TYPE", nullable = true)
    public OrderItemRebate.ItemRebateModel getMiddleMoneyCalcType() {
        return middleMoneyCalcType;
    }

    public void setMiddleMoneyCalcType(OrderItemRebate.ItemRebateModel middleMoneyCalcType) {
        this.middleMoneyCalcType = middleMoneyCalcType;
    }

    @Column(name = "MEMO", nullable = true, length = 200)
    @Size(max = 200)
    public String getMemo() {
        return memo;
    }

    public void setMemo(String memo) {
        this.memo = memo;
    }

    @Column(name = "PRESENTATION", nullable = false)
    public boolean isPresentation() {
        return presentation;
    }

    public void setPresentation(boolean presentation) {
        this.presentation = presentation;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "DISPATCH", nullable = true)
    public Dispatch getDispatch() {
        return dispatch;
    }

    public void setDispatch(Dispatch dispatch) {
        this.dispatch = dispatch;
    }

    @Enumerated(EnumType.STRING)
    @Column(name = "STATUS", nullable = false, length = 10)
    @NotNull
    public OrderItemStatus getStatus() {
        return status;
    }

    public void setStatus(OrderItemStatus status) {
        this.status = status;
    }

    @Column(name = "OVERLAY_OUT", nullable = false)
    public boolean isOverlyOut() {
        return overlyOut;
    }

    public void setOverlyOut(boolean overlyOut) {
        this.overlyOut = overlyOut;
    }

    @Column(name = "NEED_CONVERSION_RATE", nullable = true, scale = 10)
    public BigDecimal getNeedConvertRate() {
        return needConvertRate;
    }

    public void setNeedConvertRate(BigDecimal needConvertRate) {
        this.needConvertRate = needConvertRate;
    }

    @Column(name = "TOTAL_MONEY", nullable = true, scale = 3)
    public BigDecimal getTotalMoney() {
        return totalMoney;
    }

    public void setTotalMoney(BigDecimal totalMoney) {
        this.totalMoney = totalMoney;
    }

    @Column(name = "REBATE", nullable = false, scale = 4)
    @NotNull
    @Override
    public BigDecimal getRebate() {
        return this.rebate;
    }

    @Override
    public void setRebate(BigDecimal rebate) {
        this.rebate = rebate;
    }

    @Column(name = "NEED_MONEY", nullable = true, scale = 3)
    public BigDecimal getNeedMoney() {
        return needMoney;
    }

    public void setNeedMoney(BigDecimal needMoney) {
        this.needMoney = needMoney;
    }

    @Column(name = "NEED_COUNT", nullable = true, scale = 4)
    public BigDecimal getNeedCount() {
        return needCount;
    }

    public void setNeedCount(BigDecimal needCount) {
        this.needCount = needCount;
    }

    @Transient
    public BigDecimal getMiddleUnitCount() {
        if ((getMiddleUnit() != null) && (getCount() != null)) {
            return getCountByResUnit(getMiddleUnit());
        }
        return null;
    }


    @Transient
    public BigDecimal getCalcMiddleMoney() {
        if ((getMiddleMoneyCalcType() == null) || getMiddleMoneyCalcType().equals(OrderItemRebate.ItemRebateModel.NOT_CALC)) {
            return BigDecimal.ZERO;
        }
        //BigDecimal totalMiddleMoney = BigDecimal.ZERO;
        if (getMiddleRate() != null) {
            if (getMiddleMoneyCalcType().equals(OrderItemRebate.ItemRebateModel.BY_COUNT)) {
                if (getMiddleUnit() != null)
                    return getCountByResUnit(getMiddleUnit()).multiply(getMiddleRate());
            } else {
                return getTotalMoney().multiply(
                        getMiddleRate().divide(
                                new BigDecimal("100"), Currency.getInstance(Locale.CHINA).getDefaultFractionDigits(), BigDecimal.ROUND_HALF_UP));
            }
        }
        return BigDecimal.ZERO;
    }


}
