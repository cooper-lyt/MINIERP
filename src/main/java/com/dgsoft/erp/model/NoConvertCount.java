package com.dgsoft.erp.model;
// Generated Oct 21, 2013 2:02:43 PM by Hibernate Tools 4.0.0

import com.dgsoft.common.OrderModel;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.ParseException;

/**
 * NoConvertCount generated by hbm2java
 */
@Entity
@Table(name = "NO_CONVERT_COUNT", catalog = "MINI_ERP")
public class NoConvertCount implements java.io.Serializable, OrderModel {

	private String id;

	private StockChangeItem stockChangeItem;
	private Stock stock;
	private ResUnit resUnit;

	private BigDecimal count;
    private PrepareStockChange prepareStockChange;

	public NoConvertCount() {
	}

	public NoConvertCount(ResUnit resUnit, BigDecimal count) {

		this.resUnit = resUnit;
		this.count = count;
	}

    public NoConvertCount(Stock stock,
                          ResUnit resUnit, BigDecimal count) {
        this.stock = stock;
        this.resUnit = resUnit;
        this.count = count;
    }


    @Id
	@Column(name = "ID", unique = true, nullable = false, length = 32)
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid.hex")
	@NotNull
	@Size(max = 32)
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "STOCK_CHANGE", nullable = true)
	public StockChangeItem getStockChangeItem() {
		return this.stockChangeItem;
	}

	public void setStockChangeItem(StockChangeItem stockChangeItem) {
		this.stockChangeItem = stockChangeItem;
	}

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "PREPARE_CHANGE", nullable = true)
    public PrepareStockChange getPrepareStockChange() {
        return prepareStockChange;
    }

    public void setPrepareStockChange(PrepareStockChange prepareStockChange) {
        this.prepareStockChange = prepareStockChange;
    }

    @ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "STOCK", nullable = true)
	public Stock getStock() {
		return this.stock;
	}

	public void setStock(Stock stock) {
		this.stock = stock;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "RES_UNIT", nullable = false)
	@NotNull
	public ResUnit getResUnit() {
		return this.resUnit;
	}

	public void setResUnit(ResUnit resUnit) {
		this.resUnit = resUnit;
	}

	@Column(name = "COUNT", nullable = false, scale = 4)
	@NotNull
	public BigDecimal getCount() {
		return this.count;
	}

	public void setCount(BigDecimal count) {
		this.count = count;
        DecimalFormat df = new DecimalFormat(getResUnit().getCountFormate());
        df.setGroupingUsed(false);
        df.setRoundingMode(RoundingMode.HALF_UP);
        try {
            this.count = new BigDecimal(df.parse(df.format(count)).toString());
        } catch (ParseException e) {
        }
    }

    @Transient
    @Override
    public int getPriority() {
        return getResUnit().getPriority();
    }

    @Transient
    @Override
    public void setPriority(int priority) {
    }
}
