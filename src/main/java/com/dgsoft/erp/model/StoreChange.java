package com.dgsoft.erp.model;
// Generated Oct 1, 2013 5:41:32 PM by Hibernate Tools 4.0.0

import org.hibernate.annotations.GenericGenerator;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 * StoreChange generated by hbm2java
 */
@Entity
@Table(name = "STORE_CHANGE", catalog = "MINI_ERP")
public class StoreChange implements java.io.Serializable {

    public enum StoreChangeType {
        STORE_IN, STORE_OUT, STORE_CHECK_LOSS, STORE_CHECK_ADD;
    }

    private String id;
    private Store store;
    private Date operDate;
    private String operEmp;
    private StoreChangeType operType;
    private String memo;
    private Set<StoreChangeItem> storeChangeItems = new HashSet<StoreChangeItem>(
            0);
    private Set<StoreIn> storeIns = new HashSet<StoreIn>(0);
    private Set<ResCheck> resChecksForAddRes = new HashSet<ResCheck>(0);
    private Set<ResCheck> resChecksForLossRes = new HashSet<ResCheck>(0);
    private Set<StoreOut> storeOuts = new HashSet<StoreOut>(0);

    public StoreChange() {
    }

    public StoreChange(Store store, Date operDate, String operEmp,
                       StoreChangeType operType, String memo) {
        this.store = store;
        this.operDate = operDate;
        this.operEmp = operEmp;
        this.operType = operType;
        this.memo = memo;
    }

    @Id
    @Column(name = "ID", unique = true, nullable = false, length = 32)
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid.hex")
    @NotNull
    @Size(max = 32)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "STORE", nullable = false)
    @NotNull
    public Store getStore() {
        return this.store;
    }

    public void setStore(Store store) {
        this.store = store;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "OPER_DATE", nullable = false, length = 19)
    @NotNull
    public Date getOperDate() {
        return this.operDate;
    }

    public void setOperDate(Date operDate) {
        this.operDate = operDate;
    }

    @Column(name = "OPER_EMP", nullable = false, length = 32)
    @NotNull
    @Size(max = 32)
    public String getOperEmp() {
        return this.operEmp;
    }

    public void setOperEmp(String operEmp) {
        this.operEmp = operEmp;
    }


    @Enumerated(EnumType.STRING)
    @Column(name = "OPER_TYPE", nullable = false, length = 32)
    @NotNull
    public StoreChangeType getOperType() {
        return this.operType;
    }

    public void setOperType(StoreChangeType operType) {
        this.operType = operType;
    }

    @Column(name = "MEMO", length = 200)
    @Size(max = 200)
    public String getMemo() {
        return this.memo;
    }

    public void setMemo(String memo) {
        this.memo = memo;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeChange", orphanRemoval = true, cascade = {CascadeType.ALL})
    public Set<StoreChangeItem> getStoreChangeItems() {
        return this.storeChangeItems;
    }

    public void setStoreChangeItems(Set<StoreChangeItem> storeChangeItems) {
        this.storeChangeItems = storeChangeItems;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeChange")
    public Set<StoreIn> getStoreIns() {
        return this.storeIns;
    }

    public void setStoreIns(Set<StoreIn> storeIns) {
        this.storeIns = storeIns;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeChangeByAddRes")
    public Set<ResCheck> getResChecksForAddRes() {
        return this.resChecksForAddRes;
    }

    public void setResChecksForAddRes(Set<ResCheck> resChecksForAddRes) {
        this.resChecksForAddRes = resChecksForAddRes;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeChangeByLossRes")
    public Set<ResCheck> getResChecksForLossRes() {
        return this.resChecksForLossRes;
    }

    public void setResChecksForLossRes(Set<ResCheck> resChecksForLossRes) {
        this.resChecksForLossRes = resChecksForLossRes;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "storeChange")
    public Set<StoreOut> getStoreOuts() {
        return this.storeOuts;
    }

    public void setStoreOuts(Set<StoreOut> storeOuts) {
        this.storeOuts = storeOuts;
    }

}
