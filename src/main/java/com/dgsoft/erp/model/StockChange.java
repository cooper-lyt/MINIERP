package com.dgsoft.erp.model;
// Generated Oct 1, 2013 5:41:32 PM by Hibernate Tools 4.0.0

import org.hibernate.annotations.GenericGenerator;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 * StockChange generated by hbm2java
 */
@Entity
@Table(name = "STOCK_CHANGE", catalog = "MINI_ERP")
public class StockChange implements java.io.Serializable {

    public enum StoreChangeType {
        STORE_IN, STORE_OUT, STORE_CHECK_LOSS, STORE_CHECK_ADD;
    }

    private String id;
    private Store store;
    private Date operDate;
    private String operEmp;
    private StoreChangeType operType;
    private String memo;

    private Inventory inventoryAdd;
    private Inventory inventoryLoss;


    private Set<Assembly> assembliesForStoreOut = new HashSet<Assembly>(0);
    private Set<Assembly> assembliesForStoreIn = new HashSet<Assembly>(0);
    private Set<ProductStoreIn> productStoreIns = new HashSet<ProductStoreIn>(0);
    private Set<Allocation> allocationsForStoreOut = new HashSet<Allocation>(0);
    private Set<MaterialStoreIn> materialStoreIns = new HashSet<MaterialStoreIn>(0);
    private Set<Allocation> allocationsForStoreIn = new HashSet<Allocation>(0);

    private Set<ScrapStoreOut> scrapStoreOuts = new HashSet<ScrapStoreOut>(0);
    private Set<BackRes> backReses = new HashSet<BackRes>(0);
    private Set<MaterialBackStoreIn> materialBackStoreIns = new HashSet<MaterialBackStoreIn>(0);
    private Set<OrderStoreOut> orderStoreOuts = new HashSet<OrderStoreOut>(0);

    private Set<StockChangeItem> stockChangeItems = new HashSet<StockChangeItem>(0);


    public StockChange() {
    }

    public StockChange(Store store, Date operDate, String operEmp,
                       StoreChangeType operType, String memo) {
        this.store = store;
        this.operDate = operDate;
        this.operEmp = operEmp;
        this.operType = operType;
        this.memo = memo;
    }

    @Id
    @Column(name = "ID", unique = true, nullable = false, length = 32)
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid.hex")
    @NotNull
    @Size(max = 32)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "STORE", nullable = false)
    @NotNull
    public Store getStore() {
        return this.store;
    }

    public void setStore(Store store) {
        this.store = store;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "OPER_DATE", nullable = false, length = 19)
    @NotNull
    public Date getOperDate() {
        return this.operDate;
    }

    public void setOperDate(Date operDate) {
        this.operDate = operDate;
    }

    @Column(name = "OPER_EMP", nullable = false, length = 32)
    @NotNull
    @Size(max = 32)
    public String getOperEmp() {
        return this.operEmp;
    }

    public void setOperEmp(String operEmp) {
        this.operEmp = operEmp;
    }


    @Enumerated(EnumType.STRING)
    @Column(name = "OPER_TYPE", nullable = false, length = 32)
    @NotNull
    public StoreChangeType getOperType() {
        return this.operType;
    }

    public void setOperType(StoreChangeType operType) {
        this.operType = operType;
    }

    @Column(name = "MEMO", length = 200)
    @Size(max = 200)
    public String getMemo() {
        return this.memo;
    }

    public void setMemo(String memo) {
        this.memo = memo;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChangeByStoreOut")
    public Set<Assembly> getAssembliesForStoreOut() {
        return this.assembliesForStoreOut;
    }

    public void setAssembliesForStoreOut(Set<Assembly> assembliesForStoreOut) {
        this.assembliesForStoreOut = assembliesForStoreOut;
    }


    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange", orphanRemoval = true, cascade = {CascadeType.ALL})
    public Set<StockChangeItem> getStockChangeItems() {
        return this.stockChangeItems;
    }

    public void setStockChangeItems(Set<StockChangeItem> stockChangeItems) {
        this.stockChangeItems = stockChangeItems;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChangeByStoreIn")
    public Set<Assembly> getAssembliesForStoreIn() {
        return this.assembliesForStoreIn;
    }

    public void setAssembliesForStoreIn(Set<Assembly> assembliesForStoreIn) {
        this.assembliesForStoreIn = assembliesForStoreIn;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange")
    public Set<ProductStoreIn> getProductStoreIns() {
        return this.productStoreIns;
    }

    public void setProductStoreIns(Set<ProductStoreIn> productStoreIns) {
        this.productStoreIns = productStoreIns;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChangeByStoreOut")
    public Set<Allocation> getAllocationsForStoreOut() {
        return this.allocationsForStoreOut;
    }

    public void setAllocationsForStoreOut(Set<Allocation> allocationsForStoreOut) {
        this.allocationsForStoreOut = allocationsForStoreOut;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange")
    public Set<MaterialStoreIn> getMaterialStoreIns() {
        return this.materialStoreIns;
    }

    public void setMaterialStoreIns(Set<MaterialStoreIn> materialStoreIns) {
        this.materialStoreIns = materialStoreIns;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChangeByStoreIn")
    public Set<Allocation> getAllocationsForStoreIn() {
        return this.allocationsForStoreIn;
    }

    public void setAllocationsForStoreIn(Set<Allocation> allocationsForStoreIn) {
        this.allocationsForStoreIn = allocationsForStoreIn;
    }


    @OneToOne(optional = true, fetch = FetchType.LAZY, mappedBy = "stockChangeAdd")
    public Inventory getInventoryAdd() {
        return this.inventoryAdd;
    }

    public void setInventoryAdd(Inventory inventoryAdd) {
        this.inventoryAdd = inventoryAdd;
    }

    @OneToOne(optional = true, fetch = FetchType.LAZY, mappedBy = "stockChangeLoss")
    public Inventory getInventoryLoss() {
        return this.inventoryLoss;
    }

    public void setInventoryLoss(Inventory inventoryLoss) {
        this.inventoryLoss = inventoryLoss;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange")
    public Set<ScrapStoreOut> getScrapStoreOuts() {
        return this.scrapStoreOuts;
    }

    public void setScrapStoreOuts(Set<ScrapStoreOut> scrapStoreOuts) {
        this.scrapStoreOuts = scrapStoreOuts;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange")
    public Set<BackRes> getBackReses() {
        return this.backReses;
    }

    public void setBackReses(Set<BackRes> backReses) {
        this.backReses = backReses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange")
    public Set<MaterialBackStoreIn> getMaterialBackStoreIns() {
        return this.materialBackStoreIns;
    }

    public void setMaterialBackStoreIns(
            Set<MaterialBackStoreIn> materialBackStoreIns) {
        this.materialBackStoreIns = materialBackStoreIns;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange")
    public Set<OrderStoreOut> getOrderStoreOuts() {
        return this.orderStoreOuts;
    }

    public void setOrderStoreOuts(Set<OrderStoreOut> orderStoreOuts) {
        this.orderStoreOuts = orderStoreOuts;
    }

}
