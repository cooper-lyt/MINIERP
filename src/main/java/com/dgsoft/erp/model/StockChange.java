package com.dgsoft.erp.model;
// Generated Oct 1, 2013 5:41:32 PM by Hibernate Tools 4.0.0

import com.dgsoft.erp.model.api.StoreResCountTotalGroup;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.*;

/**
 * StockChange generated by hbm2java
 */
@Entity
@Table(name = "STOCK_CHANGE", catalog = "MINI_ERP")
public class StockChange implements Comparable<StockChange>, java.io.Serializable {

    @Override
    @Transient
    public int compareTo(StockChange o) {
        return getOperDate().compareTo(o.getOperDate());
    }

    public enum StoreChangeType {
        MATERIAL_IN(EnumSet.of(ResCategory.ResType.MATERIAL, ResCategory.ResType.OUTER_MATERIAL), false),
        MATERIAL_BACK_IN(EnumSet.of(ResCategory.ResType.MATERIAL, ResCategory.ResType.OUTER_MATERIAL), false),
        MATERIAL_OUT(EnumSet.of(ResCategory.ResType.MATERIAL, ResCategory.ResType.OUTER_MATERIAL), true),
        SELL_OUT(EnumSet.of(ResCategory.ResType.PRODUCT, ResCategory.ResType.FITTING), true),
        SELL_BACK(EnumSet.of(ResCategory.ResType.PRODUCT, ResCategory.ResType.FITTING), false),
        PRODUCE_IN(EnumSet.of(ResCategory.ResType.PRODUCT, ResCategory.ResType.FITTING, ResCategory.ResType.SEMI_PRODUCT, ResCategory.ResType.WORK_IN_PROCESS), false),
        ALLOCATION_IN(EnumSet.allOf(ResCategory.ResType.class), false),
        ALLOCATION_OUT(EnumSet.allOf(ResCategory.ResType.class), true),
        ASSEMBLY_IN(EnumSet.allOf(ResCategory.ResType.class), false),
        ASSEMBLY_OUT(EnumSet.allOf(ResCategory.ResType.class), true),
        SCRAP_OUT(EnumSet.allOf(ResCategory.ResType.class), true),
        STORE_CHECK_LOSS(EnumSet.allOf(ResCategory.ResType.class), true),
        STORE_CHECK_ADD(EnumSet.allOf(ResCategory.ResType.class), false),
        STORE_CHANGE_IN(EnumSet.allOf(ResCategory.ResType.class), false),
        STORE_CHANGE_OUT(EnumSet.allOf(ResCategory.ResType.class), true);

        private EnumSet<ResCategory.ResType> resTypes;

        private boolean out;

        public EnumSet<ResCategory.ResType> getResTypes() {
            return resTypes;
        }


        public boolean isOut() {
            return out;
        }

        private StoreChangeType(EnumSet<ResCategory.ResType> resTypes, boolean out) {
            this.resTypes = resTypes;
            this.out = out;
        }
    }

    private String id;
    private Store store;
    private Date operDate;
    private String operEmp;
    private StoreChangeType operType;
    private String memo;
    private boolean verify;

    private Set<StockChangeItem> stockChangeItems = new HashSet<StockChangeItem>(0);
    private Set<PrepareStockChange> prepareStockChanges = new HashSet<PrepareStockChange>(0);

    public StockChange() {
    }

    public StockChange(boolean verify) {
        this.verify = verify;
    }


    public StockChange(Store store, String operEmp,
                       StoreChangeType operType, boolean verify) {
        this.store = store;
        this.operEmp = operEmp;
        this.operType = operType;
        this.verify = verify;
    }

    public StockChange(Store store, Date operDate, String operEmp,
                       StoreChangeType operType, String memo, boolean verify) {
        this.store = store;
        this.operDate = operDate;
        this.operEmp = operEmp;
        this.operType = operType;
        this.memo = memo;
        this.verify = verify;
    }

    public StockChange(String id, Store store, Date operDate, String operEmp,
                       StoreChangeType operType, String memo, boolean verify) {
        this(store, operDate, operEmp, operType, memo, verify);
        this.id = id;
    }

    @Id
    @Column(name = "ID", unique = true, nullable = false, length = 32)
    @NotNull
    @Size(max = 32)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @Column(name = "VERIFY", nullable = false)
    public boolean isVerify() {
        return verify;
    }

    public void setVerify(boolean verify) {
        this.verify = verify;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "STORE", nullable = false)
    @NotNull
    public Store getStore() {
        return this.store;
    }

    public void setStore(Store store) {
        this.store = store;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "OPER_DATE", nullable = false, length = 19)
    @NotNull
    public Date getOperDate() {
        return this.operDate;
    }

    public void setOperDate(Date operDate) {
        this.operDate = operDate;
    }

    @Column(name = "OPER_EMP", nullable = false, length = 32)
    @NotNull
    @Size(max = 32)
    public String getOperEmp() {
        return this.operEmp;
    }

    public void setOperEmp(String operEmp) {
        this.operEmp = operEmp;
    }


    @Enumerated(EnumType.STRING)
    @Column(name = "OPER_TYPE", nullable = false, length = 32)
    @NotNull
    public StoreChangeType getOperType() {
        return this.operType;
    }

    public void setOperType(StoreChangeType operType) {
        this.operType = operType;
    }

    @Column(name = "MEMO", length = 200)
    @Size(max = 200)
    public String getMemo() {
        return this.memo;
    }

    public void setMemo(String memo) {
        this.memo = memo;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange", orphanRemoval = true, cascade = {CascadeType.ALL})
    public Set<StockChangeItem> getStockChangeItems() {
        return this.stockChangeItems;
    }

    public void setStockChangeItems(Set<StockChangeItem> stockChangeItems) {
        this.stockChangeItems = stockChangeItems;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange", orphanRemoval = true, cascade = {CascadeType.ALL})
    public Set<PrepareStockChange> getPrepareStockChanges() {
        return prepareStockChanges;
    }

    public void setPrepareStockChanges(Set<PrepareStockChange> prepareStockChanges) {
        this.prepareStockChanges = prepareStockChanges;
    }

    @Transient
    public StoreResCountTotalGroup getChangeDetails() {
        return new StoreResCountTotalGroup(getStockChangeItems());
    }

    @Transient
    public List<PrepareStockChange> getPrepareStockChangeList() {
        List<PrepareStockChange> result = new ArrayList<PrepareStockChange>(getPrepareStockChanges());
        Collections.sort(result, new Comparator<PrepareStockChange>() {
                    @Override
                    public int compare(PrepareStockChange o1, PrepareStockChange o2) {
                        return o1.getStoreRes().compareTo(o2.getStoreRes());
                    }
                }
        );
        return result;
    }

    @Transient
    public List<StockChangeItem> getStockChangeItemList() {
        List<StockChangeItem> result = new ArrayList<StockChangeItem>(getStockChangeItems());
        Collections.sort(result, new Comparator<StockChangeItem>() {
            @Override
            public int compare(StockChangeItem o1, StockChangeItem o2) {
                return o1.getStoreRes().compareTo(o2.getStoreRes());
            }
        });
        return result;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChangeAdd")
    private Set<Inventory> inventoryAdds = new HashSet<Inventory>(0);
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChangeLoss")
    private Set<Inventory> inventoryLosses = new HashSet<Inventory>(0);
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChangeByStoreOut")
    private Set<Assembly> assemblyForStoreOuts = new HashSet<Assembly>(0);
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChangeByStoreIn")
    private Set<Assembly> assemblyForStoreIns = new HashSet<Assembly>(0);
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChangeByLoseOut")
    private Set<Assembly> assemblyForLoseOuts = new HashSet<Assembly>(0);
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange")
    private Set<ProductStoreIn> productStoreIns = new HashSet<ProductStoreIn>(0);
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange")
    private Set<MaterialStoreOut> materialStoreOuts = new HashSet<MaterialStoreOut>(0);
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChangeByStoreOut")
    private Set<Allocation> allocationForStoreOuts = new HashSet<Allocation>(0);
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange")
    private Set<MaterialStoreIn> materialStoreIns = new HashSet<MaterialStoreIn>(0);
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChangeByStoreIn")
    private Set<Allocation> allocationForStoreIns = new HashSet<Allocation>(0);
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange")
    private Set<ScrapStoreOut> scrapStoreOuts = new HashSet<ScrapStoreOut>(0);
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange")
    private Set<BackDispatch> backDispatchs = new HashSet<BackDispatch>(0);
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange")
    private Set<MaterialBackStoreIn> materialBackStoreIns = new HashSet<MaterialBackStoreIn>(0);
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange")
    private Set<StoreChange> storeChanges = new HashSet<StoreChange>(0);
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "stockChange")
    private Set<Dispatch> orderDispatchs = new HashSet<Dispatch>(0);


    @Transient
    public Assembly getAssemblyForStoreOut() {
        return this.assemblyForStoreOuts.isEmpty() ? null : assemblyForStoreOuts.iterator().next();
    }

    public void setAssemblyForStoreOut(Assembly assemblyForStoreOut) {
        assemblyForStoreOuts.clear();
        assemblyForStoreOuts.add(assemblyForStoreOut);
    }


    @Transient
    public Assembly getAssemblyForStoreIn() {
        return (assemblyForStoreIns.isEmpty() ? null : assemblyForStoreIns.iterator().next());
    }

    public void setAssemblyForStoreIn(Assembly assemblyForStoreIn) {
        assemblyForStoreIns.clear();
        assemblyForStoreIns.add(assemblyForStoreIn);
    }

    @Transient
    public Assembly getAssemblyForLoseOut() {
        return assemblyForLoseOuts.isEmpty() ? null : assemblyForLoseOuts.iterator().next();
    }

    public void setAssemblyForLoseOut(Assembly assemblyForLoseOut) {
        assemblyForLoseOuts.clear();
        assemblyForLoseOuts.add(assemblyForLoseOut);
    }

    @Transient
    public ProductStoreIn getProductStoreIn() {
        return productStoreIns.isEmpty() ? null : productStoreIns.iterator().next();
    }

    public void setProductStoreIn(ProductStoreIn productStoreIn) {
        productStoreIns.clear();
        productStoreIns.add(productStoreIn);
    }

    @Transient
    public MaterialStoreOut getMaterialStoreOut() {
        return materialStoreOuts.isEmpty() ? null : materialStoreOuts.iterator().next();
    }

    public void setMaterialStoreOut(MaterialStoreOut materialStoreOut) {
        materialStoreOuts.clear();
        materialStoreOuts.add(materialStoreOut);
    }

    @Transient
    public Allocation getAllocationForStoreOut() {
        return allocationForStoreOuts.isEmpty() ? null : allocationForStoreOuts.iterator().next();
    }

    public void setAllocationForStoreOut(Allocation allocationForStoreOut) {
        allocationForStoreOuts.clear();
        allocationForStoreOuts.add(allocationForStoreOut);
    }

    @Transient
    public MaterialStoreIn getMaterialStoreIn() {
        return materialStoreIns.isEmpty() ? null : materialStoreIns.iterator().next();
    }

    public void setMaterialStoreIn(MaterialStoreIn materialStoreIn) {
        materialStoreIns.clear();
        materialStoreIns.add(materialStoreIn);
    }

    @Transient
    public Allocation getAllocationForStoreIn() {
        return allocationForStoreIns.isEmpty() ? null : allocationForStoreIns.iterator().next();
    }

    public void setAllocationForStoreIn(Allocation allocationsForStoreIn) {
        allocationForStoreIns.clear();
        allocationForStoreIns.add(allocationsForStoreIn);
    }


    @Transient
    public Inventory getInventoryAdd() {
        return inventoryAdds.isEmpty() ? null : inventoryAdds.iterator().next();
    }

    public void setInventoryAdd(Inventory inventoryAdd) {
        inventoryAdds.clear();
        inventoryAdds.add(inventoryAdd);
    }

    @Transient
    public Inventory getInventoryLoss() {
        return inventoryLosses.isEmpty() ? null : inventoryLosses.iterator().next();
    }

    public void setInventoryLoss(Inventory inventoryLoss) {
        inventoryLosses.clear();
        inventoryLosses.add(inventoryLoss);
    }

    @Transient
    public ScrapStoreOut getScrapStoreOut() {
        return scrapStoreOuts.isEmpty() ? null : scrapStoreOuts.iterator().next();
    }

    public void setScrapStoreOut(ScrapStoreOut scrapStoreOut) {
        scrapStoreOuts.clear();
        scrapStoreOuts.add(scrapStoreOut);
    }


    @Transient
    public BackDispatch getBackDispatch() {
        return backDispatchs.isEmpty() ? null : backDispatchs.iterator().next();
    }

    public void setBackDispatch(BackDispatch backDispatch) {
        backDispatchs.clear();
        backDispatchs.add(backDispatch);
    }

    @Transient
    public MaterialBackStoreIn getMaterialBackStoreIn() {
        return materialBackStoreIns.isEmpty() ? null : materialBackStoreIns.iterator().next();
    }

    public void setMaterialBackStoreIn(MaterialBackStoreIn materialBackStoreIn) {
        materialBackStoreIns.clear();
        materialBackStoreIns.add(materialBackStoreIn);
    }

    @Transient
    public Dispatch getOrderDispatch() {
        return orderDispatchs.isEmpty() ? null : orderDispatchs.iterator().next();
    }

    public void setOrderDispatch(Dispatch orderStoreOuts) {
        orderDispatchs.clear();orderDispatchs.add(orderStoreOuts);
    }

    @Transient
    public StoreChange getStoreChange() {
        return storeChanges.isEmpty() ? null : storeChanges.iterator().next();
    }

    public void setStoreChange(StoreChange storeChange) {
        storeChanges.clear();storeChanges.add(storeChange);
    }
}
