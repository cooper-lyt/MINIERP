INSERT INTO DG_SYSTEM.FUNCTION (ID, NAME, CATEGORY, ICON, LOCATION, BANNER, PRIORITY, MEMO) VALUES
  ('erp.search.preparePayList', '客户预存款查询', 'erp.sale.mgr', '', '/func/erp/sale/PreparePayList.seam', '', '901', '');
INSERT INTO DG_SYSTEM.FUNCTION (ID, NAME, CATEGORY, ICON, LOCATION, BANNER, PRIORITY, MEMO) VALUES
  ('erp.search.backPrepareList', '客户退预存款查询', 'erp.sale.mgr', '', '/func/erp/sale/BackPrepareMoneyList.seam', '', '902',
   '');
INSERT INTO DG_SYSTEM.ROLE_FUNCTION (ROL_ID, FUN_ID) VALUES ('erp.sale.manager', 'erp.search.preparePayList');
INSERT INTO DG_SYSTEM.ROLE_FUNCTION (ROL_ID, FUN_ID) VALUES ('erp.sale.manager', 'erp.search.backPrepareList');
INSERT INTO DG_SYSTEM.ROLE_FUNCTION (ROL_ID, FUN_ID) VALUES ('erp.sale.saler', 'erp.search.preparePayList');
INSERT INTO DG_SYSTEM.ROLE_FUNCTION (ROL_ID, FUN_ID) VALUES ('erp.sale.saler', 'erp.search.backPrepareList');
INSERT INTO DG_SYSTEM.ROLE_FUNCTION (ROL_ID, FUN_ID) VALUES ('erp.finance.accountancy', 'erp.search.preparePayList');
INSERT INTO DG_SYSTEM.ROLE_FUNCTION (ROL_ID, FUN_ID) VALUES ('erp.finance.accountancy', 'erp.search.backPrepareList');
INSERT INTO DG_SYSTEM.ROLE_FUNCTION (ROL_ID, FUN_ID) VALUES ('erp.finance.cashier', 'erp.search.preparePayList');
INSERT INTO DG_SYSTEM.ROLE_FUNCTION (ROL_ID, FUN_ID) VALUES ('erp.finance.cashier', 'erp.search.backPrepareList');



USE MINI_ERP;

-- condition
-- 20140421-13


-- is zero

ALTER TABLE MINI_ERP.ORDER_BACK DROP SAVE_MONEY;

-- CUSTOMER
ALTER TABLE MINI_ERP.CUSTOMER ADD ADVANCE_MONEY DECIMAL(19, 3) NOT NULL;
ALTER TABLE MINI_ERP.CUSTOMER ADD ACCOUNT_MONEY DECIMAL(19, 3) NOT NULL;
ALTER TABLE MINI_ERP.CUSTOMER ADD PROXY_ACCOUNT_MONEY DECIMAL(19, 3) NOT NULL;


UPDATE MINI_ERP.CUSTOMER
SET ACCOUNT_MONEY = 0;
UPDATE MINI_ERP.CUSTOMER
SET PROXY_ACCOUNT_MONEY = 0;
UPDATE MINI_ERP.CUSTOMER
SET ADVANCE_MONEY = 0;

UPDATE MINI_ERP.CUSTOMER
SET ADVANCE_MONEY = BALANCE
WHERE BALANCE >= 0;
UPDATE MINI_ERP.CUSTOMER
SET ACCOUNT_MONEY = BALANCE * -1
WHERE BALANCE < 0;



ALTER TABLE MINI_ERP.CUSTOMER DROP BALANCE;


-- ORDER

ALTER TABLE MINI_ERP.CUSTOMER_ORDER ADD ALL_SHIP_DATE TIMESTAMP NULL;
ALTER TABLE MINI_ERP.CUSTOMER_ORDER ADD ADVANCE_MONEY DECIMAL(19, 3) NOT NULL;

UPDATE CUSTOMER_ORDER
SET ALL_SHIP_DATE = (SELECT
                       MAX(OPER_DATE)
                     FROM STOCK_CHANGE
                       LEFT JOIN DISPATCH ON DISPATCH.STOCK_CHANGE = STOCK_CHANGE.ID
                       LEFT JOIN NEED_RES ON NEED_RES.ID = DISPATCH.NEED_RES
                     WHERE NEED_RES.CUSTOMER_ORDER = CUSTOMER_ORDER.ID)
WHERE CUSTOMER_ORDER.ALL_STORE_OUT = b'1';

UPDATE MINI_ERP.CUSTOMER_ORDER
SET ADVANCE_MONEY = 0;

UPDATE MINI_ERP.CUSTOMER_ORDER
SET ADVANCE_MONEY = MONEY
WHERE PAY_TYPE = 'PAY_FIRST' AND ALL_STORE_OUT = b'0' AND MONEY_COMPLETE = b'1';


DELIMITER //

CREATE PROCEDURE CALC_REVEIVE_MONEY()
  BEGIN
    DECLARE Done INT DEFAULT 0;

    DECLARE ORDER_ID VARCHAR(32);

    DECLARE O_MONEY DECIMAL(19, 3);

    DECLARE R_MONEY DECIMAL(19, 3);

-- 声明两个游标，第二个游标使用到第一个的查询结果
    DECLARE order_csr CURSOR FOR SELECT
                                   ID
                                 FROM CUSTOMER_ORDER
                                 WHERE PAY_TYPE = 'PAY_FIRST' AND ALL_STORE_OUT = b'0' AND MONEY_COMPLETE = b'0';


    DECLARE oper_csr CURSOR FOR SELECT
                                  OPER_MONEY
                                FROM ACCOUNT_OPER
                                WHERE CUSTOMER_ORDER = ORDER_ID AND OPER_TYPE = 'ORDER_PAY';


    DECLARE CONTINUE HANDLER FOR NOT FOUND SET Done = 1;

    OPEN order_csr;
-- 第一个循环
    order_loop: LOOP -- Loop through org_grade
      FETCH order_csr
      INTO ORDER_ID;
      IF Done = 1
      THEN
        LEAVE order_loop;
      END IF;
      SET R_MONEY = 0;

      OPEN oper_csr;
-- 第二个循环
      oper_loop: LOOP -- Loop through class in grade.
        FETCH oper_csr
        INTO O_MONEY;
        IF Done = 1
        THEN
          LEAVE oper_loop;
        END IF;

        SET R_MONEY = R_MONEY + O_MONEY;
-- 结束第一个循环
      END LOOP oper_loop;
      CLOSE oper_csr;
      SET Done = 0;

      UPDATE CUSTOMER_ORDER
      SET ADVANCE_MONEY = R_MONEY
      WHERE ID = ORDER_ID;
-- 结束第二个循环
    END LOOP order_loop;
    CLOSE order_csr;
  END;
//
DELIMITER ;

CALL CALC_REVEIVE_MONEY();

DROP PROCEDURE CALC_REVEIVE_MONEY;


/*
        ORDER_SAVINGS(true), ORDER_PAY(false), ORDER_EARNEST(false),
        PRE_DEPOSIT(true),PRE_DEPOSIT_BY_ORDER(true), DEPOSIT_BACK(false), ORDER_FREE(true),
        ORDER_BACK_SAVINGS(true), ORDER_BACK(false),
        ORDER_CANCEL_SAVINGS(true), ORDER_CANCEL_BACK(false);

        OPER_TYPE<>'ORDER_PAY' and OPER_TYPE<>'ORDER_SAVINGS' and OPER_TYPE <> 'PRE_DEPOSIT_BY_ORDER'

 */



-- ACCOUNT_OPER
ALTER TABLE MINI_ERP.ACCOUNT_OPER ADD ADVANCE_RECEIVABLE DECIMAL(19, 3) NOT NULL;
ALTER TABLE MINI_ERP.ACCOUNT_OPER ADD ACCOUNTS_RECEIVABLE DECIMAL(19, 3) NOT NULL;
ALTER TABLE MINI_ERP.ACCOUNT_OPER ADD PROXY_ACCOUNTS_RECEIVABLE DECIMAL(19, 3) NOT NULL;
ALTER TABLE MINI_ERP.ACCOUNT_OPER ADD USE_CHECK BIT(1) NOT NULL;

UPDATE MINI_ERP.ACCOUNT_OPER
SET ADVANCE_RECEIVABLE = 0, ACCOUNTS_RECEIVABLE = 0, PROXY_ACCOUNTS_RECEIVABLE = 0, USE_CHECK = b'0';


INSERT BACK_PREPARE_MONEY(ID,ACCOUNT_OPER) VALUES('MB1','ff80808145881a3f01459152187f01b1');

UPDATE ACCOUNT_OPER SET OPER_TYPE = 'DEPOSIT_BACK',ADVANCE_RECEIVABLE = 755 WHERE ID='ff80808145881a3f01459152187f01b1';

DELETE FROM ACCOUNT_OPER WHERE ID='ff80808145881a3f01458c4e09c000a2';
DELETE FROM ACCOUNT_OPER WHERE ID='ff80808145881a3f01459152187e01b0';

DELIMITER //

CREATE PROCEDURE CALC_REVEIVE_MONEY()
  BEGIN
    DECLARE Done INT DEFAULT 0;

    DECLARE ORDER_ID VARCHAR(32);
    DECLARE _OPER_ID VARCHAR(32);
    DECLARE _ORDER_PAY_TYPE VARCHAR(32);

    DECLARE O_MONEY DECIMAL(19, 3);


-- 声明两个游标，第二个游标使用到第一个的查询结果
    DECLARE order_csr CURSOR FOR SELECT
                                   ID , PAY_TYPE
                                 FROM CUSTOMER_ORDER;
    DECLARE oper_csr CURSOR FOR SELECT
                                  OPER_MONEY,ID
                                FROM ACCOUNT_OPER
                                WHERE CUSTOMER_ORDER = ORDER_ID AND OPER_TYPE = 'ORDER_SAVINGS';
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET Done = 1;

    OPEN order_csr;
-- 第一个循环
    order_loop: LOOP -- Loop through org_grade
      FETCH order_csr
      INTO ORDER_ID,_ORDER_PAY_TYPE;
      IF Done = 1
      THEN
        LEAVE order_loop;
      END IF;



      OPEN oper_csr;
-- 第二个循环
      oper_loop: LOOP -- Loop through class in grade.
        FETCH oper_csr
        INTO O_MONEY,_OPER_ID;
        IF Done = 1
        THEN
          LEAVE oper_loop;
        END IF;

        IF _ORDER_PAY_TYPE = 'EXPRESS_PROXY'
        THEN
          UPDATE ACCOUNT_OPER SET ACCOUNT_OPER.PROXY_ACCOUNTS_RECEIVABLE = ACCOUNT_OPER.OPER_MONEY WHERE ACCOUNT_OPER.CUSTOMER_ORDER = ORDER_ID;

        END IF;


        IF _ORDER_PAY_TYPE <> 'EXPRESS_PROXY'
        THEN
          UPDATE ACCOUNT_OPER SET ACCOUNT_OPER.ACCOUNTS_RECEIVABLE = ACCOUNT_OPER.OPER_MONEY WHERE ACCOUNT_OPER.CUSTOMER_ORDER = ORDER_ID;
        END IF;


-- 结束第一个循环
      END LOOP oper_loop;
      CLOSE oper_csr;
      SET Done = 0;

-- 结束第二个循环
    END LOOP order_loop;
    CLOSE order_csr;
  END; //
DELIMITER ;

CALL CALC_REVEIVE_MONEY();

DROP PROCEDURE CALC_REVEIVE_MONEY;






DELIMITER //

CREATE PROCEDURE CALC_REVEIVE_MONEY()
  BEGIN
    DECLARE Done INT DEFAULT 0;

    DECLARE ORDER_ID VARCHAR(32);

    DECLARE _ORDER_EMP VARCHAR(32);
    DECLARE _ALL_SHIP_DATE TIMESTAMP;
    DECLARE _CUSTOMER_ID VARCHAR(32);

    DECLARE _ORDER_PAY_TYPE VARCHAR(32);

    DECLARE _MONEY_COMPLETE BIT(1);

    DECLARE _ADVANCE_RECEIVABLE DECIMAL(19, 3);
    DECLARE _ACCOUNTS_RECEIVABLE DECIMAL(19, 3);

    DECLARE _ORDER_MONEY DECIMAL(19, 3);
    DECLARE _PROXY_ACCOUNTS_RECEIVABLE DECIMAL(19, 3);


    DECLARE _RRMONEY DECIMAL(19, 3);

    DECLARE O_MONEY DECIMAL(19, 3);

    DECLARE R_MONEY DECIMAL(19, 3);

    DECLARE order_csr CURSOR FOR SELECT
                                   ID,
                                   ORDER_EMPLOYEE,
                                   ALL_SHIP_DATE,
                                   CUSTOMER_ID,
                                   PAY_TYPE,
                                   MONEY_COMPLETE,
                                   MONEY
                                 FROM CUSTOMER_ORDER
                                 WHERE CANCELED = b'0' AND ALL_STORE_OUT = b'1';

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET Done = 1;

    OPEN order_csr;
    order_loop: LOOP -- Loop through org_grade
      FETCH order_csr
      INTO ORDER_ID, _ORDER_EMP, _ALL_SHIP_DATE, _CUSTOMER_ID, _ORDER_PAY_TYPE, _MONEY_COMPLETE, _ORDER_MONEY;
      IF Done = 1
      THEN
        LEAVE order_loop;
      END IF;

      IF _MONEY_COMPLETE = b'1'
      THEN

        IF _ORDER_PAY_TYPE = 'PAY_FIRST'
        THEN
          SET _ADVANCE_RECEIVABLE = _ORDER_MONEY;
          SET _PROXY_ACCOUNTS_RECEIVABLE = 0;
          SET _ACCOUNTS_RECEIVABLE = 0;
        END IF;
        IF _ORDER_PAY_TYPE <> 'PAY_FIRST'
        THEN

          SELECT
            SUM(OPER_MONEY)
          INTO _ADVANCE_RECEIVABLE
          FROM ACCOUNT_OPER
          WHERE CUSTOMER_ORDER = ORDER_ID AND OPER_TYPE = 'ORDER_PAY' AND PAY_TYPE = 'FROM_PRE_DEPOSIT';

          IF _ADVANCE_RECEIVABLE IS NULL
          THEN
            SET _ADVANCE_RECEIVABLE = 0;
          END IF;

          IF _ORDER_PAY_TYPE = 'EXPRESS_PROXY'
          THEN
            SET _PROXY_ACCOUNTS_RECEIVABLE = _ORDER_MONEY - _ADVANCE_RECEIVABLE;
            SET _ACCOUNTS_RECEIVABLE = 0;
          END IF;

          IF _ORDER_PAY_TYPE <> 'EXPRESS_PROXY'
          THEN
            SET _PROXY_ACCOUNTS_RECEIVABLE = 0;
            SET _ACCOUNTS_RECEIVABLE = _ORDER_MONEY - _ADVANCE_RECEIVABLE;
          END IF;

        END IF;
      END IF;

      IF _MONEY_COMPLETE = b'0'
      THEN

        SELECT
          SUM(OPER_MONEY)
        INTO _ADVANCE_RECEIVABLE
        FROM ACCOUNT_OPER
        WHERE CUSTOMER_ORDER = ORDER_ID AND OPER_TYPE = 'ORDER_PAY' AND PAY_TYPE = 'FROM_PRE_DEPOSIT';

        IF _ADVANCE_RECEIVABLE IS NULL
        THEN
          SET _ADVANCE_RECEIVABLE = 0;
        END IF;

        IF _ORDER_PAY_TYPE = 'EXPRESS_PROXY'
        THEN
          SET _PROXY_ACCOUNTS_RECEIVABLE = _ORDER_MONEY - _ADVANCE_RECEIVABLE;
          SET _ACCOUNTS_RECEIVABLE = 0;
        END IF;

        IF _ORDER_PAY_TYPE <> 'EXPRESS_PROXY'
        THEN
          SET _PROXY_ACCOUNTS_RECEIVABLE = 0;
          SET _ACCOUNTS_RECEIVABLE = _ORDER_MONEY - _ADVANCE_RECEIVABLE;
        END IF;

        SELECT SUM(OPER_MONEY) INTO _RRMONEY FROM ACCOUNT_OPER
          WHERE CUSTOMER_ORDER = ORDER_ID AND OPER_TYPE = 'ORDER_PAY';

        IF _RRMONEY IS NULL THEN
            SET _RRMONEY = 0;
          END IF;

        SET _RRMONEY = _ORDER_MONEY - _RRMONEY;

        IF _ORDER_PAY_TYPE = 'EXPRESS_PROXY'
        THEN
          UPDATE MINI_ERP.CUSTOMER SET PROXY_ACCOUNT_MONEY = PROXY_ACCOUNT_MONEY + _RRMONEY, MEMO = CONCAT(MEMO , ' add MONEY', _RRMONEY) WHERE ID = _CUSTOMER_ID;
        END IF;

        IF _ORDER_PAY_TYPE <> 'EXPRESS_PROXY'
        THEN
          UPDATE MINI_ERP.CUSTOMER SET ACCOUNT_MONEY = ACCOUNT_MONEY + _RRMONEY , MEMO = CONCAT(MEMO , ' add MONEY', _RRMONEY) WHERE ID = _CUSTOMER_ID;
        END IF;

      END IF;

      DELETE FROM  ACCOUNT_OPER WHERE CUSTOMER_ORDER = ORDER_ID AND OPER_TYPE = 'ORDER_PAY';

      INSERT ACCOUNT_OPER (ID, OPER_EMP, OPER_MONEY, OPER_TYPE, OPER_DATE, CUSTOM, PAY_TYPE, REMIT_FEE, CUSTOMER_ORDER, ADVANCE_RECEIVABLE, ACCOUNTS_RECEIVABLE, PROXY_ACCOUNTS_RECEIVABLE)
      VALUES (CONCAT('M' , ORDER_ID), _ORDER_EMP, 0, 'ORDER_PAY', _ALL_SHIP_DATE, _CUSTOMER_ID, NULL, 0, ORDER_ID,_ADVANCE_RECEIVABLE,_ACCOUNTS_RECEIVABLE, _PROXY_ACCOUNTS_RECEIVABLE);

    END LOOP order_loop;
    CLOSE order_csr;
  END;//
DELIMITER ;

CALL CALC_REVEIVE_MONEY();

DROP PROCEDURE CALC_REVEIVE_MONEY;



-- 20140414-3

UPDATE ACCOUNT_OPER SET ADVANCE_RECEIVABLE = 0.04 WHERE ID = 'ff8080814561004f014564b42bd60039';

-- 20140403-568

UPDATE ACCOUNT_OPER SET ADVANCE_RECEIVABLE = 1528 WHERE ID = 'ff808081456934e201456e5f32bf015e';

-- 20140423-1

UPDATE ACCOUNT_OPER SET ADVANCE_RECEIVABLE = 36540 WHERE ID = 'ff80808145881a3f0145915f592a01ba';



DELETE FROM ACCOUNT_OPER WHERE OPER_TYPE='PRE_DEPOSIT_BY_ORDER';




DELETE
FROM ACCOUNT_OPER
WHERE OPER_TYPE = 'ORDER_PAY' AND CUSTOMER_ORDER IN (SELECT CUSTOMER_ORDER.ID  FROM CUSTOMER_ORDER
WHERE CANCELED = b'0' AND ALL_STORE_OUT = b'0');


UPDATE ACCOUNT_OPER LEFT JOIN CUSTOMER ON CUSTOMER.ID = ACCOUNT_OPER.CUSTOM SET ACCOUNT_OPER.ADVANCE_RECEIVABLE = ACCOUNT_OPER.OPER_MONEY WHERE OPER_TYPE = 'PRE_DEPOSIT' AND CUSTOMER.ACCOUNT_MONEY = 0;
UPDATE ACCOUNT_OPER LEFT JOIN CUSTOMER ON CUSTOMER.ID = ACCOUNT_OPER.CUSTOM SET ACCOUNT_OPER.ACCOUNTS_RECEIVABLE = ACCOUNT_OPER.OPER_MONEY WHERE OPER_TYPE = 'PRE_DEPOSIT' AND CUSTOMER.ACCOUNT_MONEY > 0;

--  ORDER_SAVINGS

DELETE FROM ACCOUNT_OPER WHERE OPER_TYPE='ARREARS';

DELETE FROM ACCOUNT_OPER WHERE OPER_TYPE='FROM_PRE_DEPOSIT';



ALTER TABLE MINI_ERP.ACCOUNT_OPER DROP FOREIGN KEY ACCOUNT_OPER_ibfk_1;
ALTER TABLE MINI_ERP.ACCOUNT_OPER DROP DEBIT_ACCOUNT;

ALTER TABLE MINI_ERP.ACCOUNT_OPER DROP FOREIGN KEY ACCOUNT_OPER_ibfk_2;
ALTER TABLE MINI_ERP.ACCOUNT_OPER DROP CREDIT_ACCOUNT;

ALTER TABLE MINI_ERP.ACCOUNT_OPER DROP OPER_MONEY;


