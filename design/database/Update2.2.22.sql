DROP TABLE IF EXISTS MINI_ERP.INVENTORY;
DROP TABLE IF EXISTS MINI_ERP.INVENTORY_ITEM;

CREATE TABLE MINI_ERP.INVENTORY
(
  ID VARCHAR(32) NOT NULL COMMENT 'ID',
  APPLY_DATE DATETIME NOT NULL COMMENT '申请日期',
  CHECK_DATE DATETIME NOT NULL COMMENT '盘点日期',
-- 入库日期
  CHECKED_DATE DATETIME COMMENT '审核日期 : 入库日期',
  MEMO VARCHAR(200) COMMENT '备注',
  STORE VARCHAR(32) NOT NULL COMMENT 'STORE',
  TYPE VARCHAR(32) NOT NULL COMMENT '盘点类型',
  STOCK_CHANGED BIT(1) NOT NULL COMMENT '库存已改变',
  APPLY_EMP VARCHAR(32) NOT NULL COMMENT '负责人',
  CHECK_EMP VARCHAR(32) COMMENT '审核人',
  STATUS VARCHAR(20) NOT NULL COMMENT 'STATUS',
  PRIMARY KEY (ID)
) ENGINE = InnoDB COMMENT = '盘点' DEFAULT CHARACTER SET utf8;

ALTER TABLE MINI_ERP.INVENTORY
ADD FOREIGN KEY (STORE)
REFERENCES MINI_ERP.STORE (ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT
;



CREATE TABLE MINI_ERP.INVENTORY_ITEM
(
  INVENTORY VARCHAR(32) NOT NULL COMMENT 'INVENTORY',
  STOCK VARCHAR(32) NOT NULL COMMENT 'STOCK',
  BEFOR_COUNT DECIMAL(19,4) NOT NULL COMMENT '期初数量',
  LAST_COUNT DECIMAL(19,4) NOT NULL COMMENT '期末数量',
  CHANGE_ITEM VARCHAR(32) COMMENT '盘盈/盘亏项',
-- 平/盘盈/盘亏
  CHANGE_TYPE VARCHAR(20) NOT NULL COMMENT '更改类型 : 平/盘盈/盘亏',
  CHANGE_COUNT DECIMAL(19,4) NOT NULL COMMENT 'CHANGE_COUNT',
  MEMO VARCHAR(200) COMMENT '备注',
  ID VARCHAR(32) NOT NULL COMMENT 'ID',
  PRIMARY KEY (ID),
  CONSTRAINT INVENTORY_STOCK_UNIQUE UNIQUE (INVENTORY, STOCK)
) ENGINE = InnoDB COMMENT = 'INVENTORY_ITEM' DEFAULT CHARACTER SET utf8;


ALTER TABLE MINI_ERP.INVENTORY_ITEM
ADD FOREIGN KEY (INVENTORY)
REFERENCES MINI_ERP.INVENTORY (ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT
;

ALTER TABLE MINI_ERP.INVENTORY_ITEM
ADD FOREIGN KEY (STOCK)
REFERENCES MINI_ERP.STOCK (ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT
;

ALTER TABLE MINI_ERP.INVENTORY_ITEM
ADD FOREIGN KEY (CHANGE_ITEM)
REFERENCES MINI_ERP.STOCK_CHANGE_ITEM (ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT
;


ALTER TABLE MINI_ERP.STOCK_CHANGE ADD INVENTORY VARCHAR(32) NULL;

ALTER TABLE MINI_ERP.STOCK_CHANGE
ADD FOREIGN KEY (INVENTORY)
REFERENCES MINI_ERP.INVENTORY (ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT
;


-- allocation

ALTER TABLE MINI_ERP.ALLOCATION DROP FOREIGN KEY ALLOCATION_ibfk_4;
ALTER TABLE MINI_ERP.ALLOCATION DROP FOREIGN KEY ALLOCATION_ibfk_3;

ALTER TABLE MINI_ERP.STOCK_CHANGE ADD ALLOCATION VARCHAR(32) NULL;

ALTER TABLE MINI_ERP.STOCK_CHANGE
ADD FOREIGN KEY (ALLOCATION)
REFERENCES MINI_ERP.ALLOCATION (ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT
;

UPDATE MINI_ERP.STOCK_CHANGE sc SET ALLOCATION = (select allocation.id from MINI_ERP.ALLOCATION allocation where allocation.STORE_IN = sc.id) where sc.OPER_TYPE = 'ALLOCATION_IN';
UPDATE MINI_ERP.STOCK_CHANGE sc SET ALLOCATION = (select allocation.id from MINI_ERP.ALLOCATION allocation where allocation.STORE_OUT = sc.id) where sc.OPER_TYPE = 'ALLOCATION_OUT';


ALTER TABLE MINI_ERP.ALLOCATION DROP STORE_IN;
ALTER TABLE MINI_ERP.ALLOCATION DROP STORE_OUT;


ALTER TABLE MINI_ERP.ASSEMBLY DROP FOREIGN KEY ASSEMBLY_ibfk_2;
ALTER TABLE MINI_ERP.ASSEMBLY DROP STORE_IN;

ALTER TABLE MINI_ERP.ASSEMBLY DROP FOREIGN KEY ASSEMBLY_ibfk_1;
ALTER TABLE MINI_ERP.ASSEMBLY DROP STORE_OUT;

ALTER TABLE MINI_ERP.ASSEMBLY DROP FOREIGN KEY ASSEMBLY_ibfk_3;
ALTER TABLE MINI_ERP.ASSEMBLY DROP LOSE_OUT;

ALTER TABLE MINI_ERP.STOCK_CHANGE ADD ASSEMBLY VARCHAR(32) NULL;

ALTER TABLE MINI_ERP.STOCK_CHANGE
ADD FOREIGN KEY (ASSEMBLY)
REFERENCES MINI_ERP.ASSEMBLY (ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT
;


