USE MINI_ERP;

-- CUSTOMER_ORDER

ALTER TABLE MINI_ERP.CUSTOMER_ORDER DROP ARREARS;
-- add RES_MONEY
ALTER TABLE MINI_ERP.CUSTOMER_ORDER ADD RES_MONEY DECIMAL(19, 3) NOT NULL;

UPDATE MINI_ERP.CUSTOMER_ORDER
SET RES_MONEY = MONEY + TOTAL_REBATE;

-- -----------------------------------------------------------------------

USE MINI_ERP;

-- add RECEIVE_MONEY
ALTER TABLE MINI_ERP.CUSTOMER_ORDER ADD RECEIVE_MONEY DECIMAL(19, 3) NOT NULL;


DELIMITER //

CREATE PROCEDURE CALC_REVEIVE_MONEY()
  BEGIN
    DECLARE Done INT DEFAULT 0;

    DECLARE ORDER_ID VARCHAR(32);

    DECLARE R_MONEY DECIMAL(19, 3);

    DECLARE O_MONEY DECIMAL(19, 3);


-- 声明两个游标，第二个游标使用到第一个的查询结果
    DECLARE order_csr CURSOR FOR SELECT
                                   ID
                                 FROM CUSTOMER_ORDER;
    DECLARE oper_csr CURSOR FOR SELECT
                                   OPER_MONEY
                                 FROM ACCOUNT_OPER
                                 WHERE CUSTOMER_ORDER = ORDER_ID AND OPER_TYPE = 'ORDER_PAY';
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET Done = 1;

    OPEN order_csr;
-- 第一个循环
    order_loop: LOOP -- Loop through org_grade
    FETCH order_csr
    INTO ORDER_ID;
    IF Done = 1
    THEN
      LEAVE order_loop;
    END IF;
    SET R_MONEY = 0;

    OPEN oper_csr;
-- 第二个循环
    oper_loop: LOOP -- Loop through class in grade.
      FETCH oper_csr
      INTO O_MONEY;
      IF Done = 1
      THEN
        LEAVE oper_loop;
      END IF;

      SET R_MONEY = R_MONEY + O_MONEY;
-- 结束第一个循环
    END LOOP oper_loop;
    CLOSE oper_csr;
    SET Done = 0;

    UPDATE CUSTOMER_ORDER SET RECEIVE_MONEY = R_MONEY WHERE ID = ORDER_ID;
-- 结束第二个循环
    END LOOP order_loop;
    CLOSE order_csr;
  END; //
DELIMITER ;

CALL CALC_REVEIVE_MONEY();

DROP PROCEDURE CALC_REVEIVE_MONEY;



-- ----------------------------------------------------------------------------

-- ORDER_ITEM
-- ----------------------------------------------- DISPATCH
ALTER TABLE MINI_ERP.ORDER_ITEM ADD DISPATCH VARCHAR(32) NULL;

ALTER TABLE MINI_ERP.ORDER_ITEM
ADD FOREIGN KEY (DISPATCH)
REFERENCES MINI_ERP.DISPATCH (ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

ALTER TABLE MINI_ERP.ORDER_ITEM ADD STATUS VARCHAR(10) NOT NULL;

ALTER TABLE MINI_ERP.ORDER_ITEM ADD OVERLAY_OUT BIT(1) NOT NULL;
ALTER TABLE MINI_ERP.ORDER_ITEM ADD NEED_CONVERSION_RATE DECIMAL(19, 10) NULL;
ALTER TABLE MINI_ERP.ORDER_ITEM ADD TOTAL_MONEY DECIMAL(19, 3) NULL;
ALTER TABLE MINI_ERP.ORDER_ITEM ADD NEED_MONEY DECIMAL(19, 3) NULL;
ALTER TABLE MINI_ERP.ORDER_ITEM MODIFY COLUMN MONEY DECIMAL(19, 3) NULL;

-- --------------------------

DELIMITER //

CREATE FUNCTION CALC_ITEM_MONEY(I_COUNT DECIMAL(19,4) , U_MONEY DECIMAL(19,3), M_REBATE DECIMAL (19,4), MONEY_UNIT VARCHAR(32),
    STORE_RES  VARCHAR(32)) RETURNS DECIMAL(19,3)

 BEGIN

 DECLARE FLOAT_CONVERT_RATE DECIMAL(19,10);

 DECLARE UNIT_GROUP_ID VARCHAR(32);

 DECLARE UNIT_TYPE VARCHAR(32);

 DECLARE RES_ID VARCHAR(32);

 DECLARE M_RESULT DECIMAL(19,3);

 SELECT RES INTO RES_ID FROM STORE_RES WHERE ID= STORE_RES;
 SELECT UNIT_GROUP INTO UNIT_GROUP_ID FROM RES WHERE ID=RES_ID;
 SELECT TYPE INTO UNIT_TYPE FROM UNIT_GROUP WHERE ID= UNIT_GROUP_ID;

 IF UNIT_TYPE = 'FLOAT_CONVERT' THEN
    SELECT FLOAT_CONVERSION_RATE INTO FLOAT_CONVERT_RATE FROM STORE_RES WHERE ID = STORE_RES;

    SET M_RESULT =  (I_COUNT * FLOAT_CONVERT_RATE) * ((M_REBATE / 100 ) * U_MONEY);

 ELSE
   SET M_RESULT =  I_COUNT * ((M_REBATE / 100 ) * U_MONEY);
 END IF;

   RETURN(M_RESULT);

 END;//

UPDATE ORDER_ITEM SET OVERLAY_OUT = b'0',
  TOTAL_MONEY= CALC_ITEM_MONEY(COUNT,MONEY,REBATE,MONEY_UNIT,STORE_RES),
  NEED_MONEY = CALC_ITEM_MONEY(COUNT,MONEY,REBATE,MONEY_UNIT,STORE_RES) //

CREATE PROCEDURE MOVE_STORE_OUT_ITEM()
  BEGIN
    DECLARE Done INT DEFAULT 0;

    DECLARE NEED_RES_ID VARCHAR(32);

    DECLARE DISPATCH_ID VARCHAR(32);

    DECLARE DISPATCH_COUNT int;

-- 声明两个游标，第二个游标使用到第一个的查询结果
    DECLARE nr_csr CURSOR FOR SELECT
                                   ID
                                 FROM NEED_RES where STATUS = 'OUTED';

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET Done = 1;

    OPEN nr_csr;
-- 第一个循环
    order_loop: LOOP -- Loop through org_grade
      FETCH nr_csr
      INTO NEED_RES_ID;
      IF Done = 1
      THEN
        LEAVE order_loop;
      END IF;

      SELECT COUNT(*) INTO DISPATCH_COUNT FROM DISPATCH WHERE NEED_RES = NEED_RES_ID;

      IF DISPATCH_COUNT = 1 THEN
        SELECT ID INTO DISPATCH_ID FROM DISPATCH WHERE NEED_RES = NEED_RES_ID;

        UPDATE ORDER_ITEM SET DISPATCH = DISPATCH_ID , STATUS='COMPLETED' WHERE NEED_RES = NEED_RES_ID;

        DELETE FROM DISPATCH_ITEM WHERE DISPATCH = DISPATCH_ID;
          END IF;



-- 结束第二个循环
    END LOOP order_loop;
    CLOSE nr_csr;
  END; //
DELIMITER ;

CALL MOVE_STORE_OUT_ITEM();
DROP PROCEDURE MOVE_STORE_OUT_ITEM;
DROP FUNCTION CALC_ITEM_MONEY;


DELIMITER //

CREATE PROCEDURE MOVE_DISPATCH_ITEM()
  BEGIN
    DECLARE Done INT DEFAULT 0;

    DECLARE NEED_RES_ID VARCHAR(32);

    DECLARE DISPATCH_ID VARCHAR(32);

    DECLARE DISPATCH_COUNT int;

    DECLARE DISPATCH_STORE_OUT bit(1);

-- 声明两个游标，第二个游标使用到第一个的查询结果
    DECLARE nr_csr CURSOR FOR SELECT
                                ID
                              FROM NEED_RES where STATUS = 'DISPATCHED';

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET Done = 1;

    OPEN nr_csr;
-- 第一个循环
    order_loop: LOOP -- Loop through org_grade
      FETCH nr_csr
      INTO NEED_RES_ID;
      IF Done = 1
      THEN
        LEAVE order_loop;
      END IF;

      SELECT COUNT(*) INTO DISPATCH_COUNT FROM DISPATCH WHERE NEED_RES = NEED_RES_ID;

      IF DISPATCH_COUNT = 1 THEN
        SELECT ID INTO DISPATCH_ID FROM DISPATCH WHERE NEED_RES = NEED_RES_ID;
        SELECT STORE_OUT INTO DISPATCH_STORE_OUT FROM DISPATCH WHERE ID = DISPATCH_ID;

        IF DISPATCH_STORE_OUT = b'0' THEN

          UPDATE ORDER_ITEM SET DISPATCH = DISPATCH_ID , STATUS='DISPATCHED' WHERE NEED_RES = NEED_RES_ID;
        ELSE
          UPDATE ORDER_ITEM SET DISPATCH = DISPATCH_ID , STATUS='COMPLETED' WHERE NEED_RES = NEED_RES_ID;
        END IF;

        DELETE FROM DISPATCH_ITEM WHERE DISPATCH = DISPATCH_ID;

      END IF;



-- 结束第二个循环
    END LOOP order_loop;
    CLOSE nr_csr;
  END; //
DELIMITER ;

CALL MOVE_DISPATCH_ITEM();
DROP PROCEDURE MOVE_DISPATCH_ITEM;

UPDATE ORDER_ITEM SET DISPATCH = 'ff80808144f9b2b7014511dfb2e50371',STATUS='DISPATCHED' WHERE ID='ff80808144f9b2b7014511dfb2e50373';

UPDATE ORDER_ITEM SET DISPATCH = 'ff80808144f9b2b7014511dfb2e5036f', STATUS='COMPLETED' WHERE ID='ff80808144f9b2b7014511dfb2e50374';

UPDATE ORDER_ITEM SET STATUS='CREATED' WHERE ID='ff808081451df9940145265bf7c6016f';

DROP TABLE MINI_ERP.DISPATCH_ITEM;

-- OVERLY_OUT
-- ------------------------------------------------


UPDATE ORDER_ITEM SET COUNT = 6 WHERE ID='ff8080814528355601453aa7c18c018a';

ALTER TABLE MINI_ERP.OVERLY_OUT RENAME TO MINI_ERP.OWE_OUT;
ALTER TABLE MINI_ERP.OWE_OUT ADD NEED_CONVERSION_RATE DECIMAL(19, 10) NULL;



