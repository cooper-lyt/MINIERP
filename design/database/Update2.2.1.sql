DELETE FROM MINI_ERP.ACCOUNT_OPER
WHERE OPER_TYPE = 'ORDER_PAY' AND
      ADVANCE_RECEIVABLE = 0 AND ACCOUNTS_RECEIVABLE = 0 AND PROXY_ACCOUNTS_RECEIVABLE = 0;


DELETE FROM DG_SYSTEM.ROLE_FUNCTION
WHERE (ROL_ID = 'erp.sale.manager' AND FUN_ID = 'erp.search.preparePayList');
DELETE FROM DG_SYSTEM.ROLE_FUNCTION
WHERE (ROL_ID = 'erp.sale.manager' AND FUN_ID = 'erp.search.backPrepareList');
DELETE FROM DG_SYSTEM.ROLE_FUNCTION
WHERE (ROL_ID = 'erp.sale.saler' AND FUN_ID = 'erp.search.preparePayList');
DELETE FROM DG_SYSTEM.ROLE_FUNCTION
WHERE (ROL_ID = 'erp.sale.saler' AND FUN_ID = 'erp.search.backPrepareList');
DELETE FROM DG_SYSTEM.ROLE_FUNCTION
WHERE (ROL_ID = 'erp.finance.accountancy' AND FUN_ID = 'erp.search.preparePayList');
DELETE FROM DG_SYSTEM.ROLE_FUNCTION
WHERE (ROL_ID = 'erp.finance.accountancy' AND FUN_ID = 'erp.search.backPrepareList');
DELETE FROM DG_SYSTEM.ROLE_FUNCTION
WHERE (ROL_ID = 'erp.finance.cashier' AND FUN_ID = 'erp.search.preparePayList');
DELETE FROM DG_SYSTEM.ROLE_FUNCTION
WHERE (ROL_ID = 'erp.finance.cashier' AND FUN_ID = 'erp.search.backPrepareList');

DELETE FROM DG_SYSTEM.FUNCTION
WHERE (ID = 'erp.search.preparePayList');
DELETE FROM DG_SYSTEM.FUNCTION
WHERE (ID = 'erp.search.backPrepareList');


INSERT INTO DG_SYSTEM.FUNCTION (ID, NAME, CATEGORY, ICON, LOCATION, BANNER, PRIORITY, MEMO) VALUES
  ('erp.cashier.moneySave', '收款', 'erp.sale.mgr', '', '/func/erp/finance/cashier/CustomerMoneySavings.seam', '', '501',
   '');
INSERT INTO DG_SYSTEM.ROLE_FUNCTION (ROL_ID, FUN_ID) VALUES ('erp.finance.accountancy', 'erp.cashier.moneySave');
INSERT INTO DG_SYSTEM.ROLE_FUNCTION (ROL_ID, FUN_ID) VALUES ('erp.finance.cashier', 'erp.cashier.moneySave');


USE MINI_ERP;

ALTER TABLE MINI_ERP.CUSTOMER_ORDER DROP RECEIVE_MONEY;

ALTER TABLE MINI_ERP.CUSTOMER_ORDER DROP MONEY_COMPLETE;


CREATE TABLE MINI_ERP.MONEY_SAVE
(
  ID           VARCHAR(32)    NOT NULL
  COMMENT 'ID',
  PAY_TYPE     VARCHAR(32)    NOT NULL
  COMMENT '支付方式',
  REMIT_FEE    DECIMAL(19, 3) NOT NULL
  COMMENT '汇款手续费',
  USE_CHECK    BIT(1)         NOT NULL
  COMMENT '支票',
  CHECK_NUMBER VARCHAR(50) COMMENT '支票号',
  NUMBER       VARCHAR(100)   NULL
  COMMENT '帐号',
  PROXY        VARCHAR(32)    NULL
  COMMENT 'PROXY',
  MONEY        DECIMAL(19, 3) NOT NULL
  COMMENT 'MONEY',
  PRIMARY KEY (ID)
)
  ENGINE = InnoDB
  COMMENT = 'MONEY_SAVE'
  DEFAULT CHARACTER SET utf8;


ALTER TABLE MINI_ERP.MONEY_SAVE
ADD FOREIGN KEY (PROXY)
REFERENCES MINI_ERP.TRANS_CORP (ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

ALTER TABLE MINI_ERP.MONEY_SAVE
ADD FOREIGN KEY (NUMBER)
REFERENCES MINI_ERP.BANK_ACCOUNT (NUMBER)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;


ALTER TABLE MINI_ERP.ACCOUNT_OPER ADD SAVEING VARCHAR(32) NULL;

ALTER TABLE MINI_ERP.ACCOUNT_OPER
ADD FOREIGN KEY (SAVEING)
REFERENCES MINI_ERP.MONEY_SAVE (ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

-- ORDER_SAVINGS -> proxy customer
-- PRE_DEPOSIT remove
-- ORDER_FREE -> MONEY_FREE


# +------------------------+-----------+
# | OPER_TYPE              | COUNT(ID) |
# +------------------------+-----------+
# | DEPOSIT_BACK           |         1 |
# | MONEY_BACK_TO_CUSTOMER |         3 |
# | ORDER_BACK             |         3 |
# | ORDER_PAY              |       348 |
# | ORDER_SAVINGS          |       187 |
# | PRE_DEPOSIT            |        47 |
# +------------------------+-----------+


UPDATE ACCOUNT_OPER SET ACCOUNT_OPER.CUSTOMER_ORDER = null WHERE  OPER_TYPE <> 'ORDER_PAY';
UPDATE ACCOUNT_OPER SET ACCOUNT_OPER.ORDER_BACK = null WHERE  OPER_TYPE <> 'ORDER_BACK' AND OPER_TYPE <> 'MONEY_BACK_TO_CUSTOMER';

-- move
DELIMITER //

CREATE PROCEDURE CALC_REVEIVE_MONEY()
  BEGIN
    DECLARE Done INT DEFAULT 0;

    DECLARE _AID VARCHAR(32);

    DECLARE _OPER_TYPE VARCHAR(32);

    DECLARE _PAY_TYPE VARCHAR(32);

    DECLARE _REMIT_FEE DECIMAL(19, 3);

    DECLARE _USE_CHECK BIT(1);

    DECLARE _CHECK_NUMBER VARCHAR(50);

    DECLARE _BANK_ID VARCHAR(32);

    DECLARE _AD_MONEY DECIMAL(19, 3);
    DECLARE _AC_MONEY DECIMAL(19, 3);
    DECLARE _PAC_MONEY DECIMAL(19, 3);

    DECLARE _SAVE_MONEY DECIMAL(19, 3);


-- 声明两个游标，第二个游标使用到第一个的查询结果
    DECLARE order_csr CURSOR FOR SELECT
                                   ID,
                                   ACCOUNT_OPER.OPER_TYPE,PAY_TYPE,REMIT_FEE,USE_CHECK,CHECK_NUMBER,
                                   ACCOUNT_OPER.BANK_ACCOUNT,ADVANCE_RECEIVABLE,ACCOUNTS_RECEIVABLE,PROXY_ACCOUNTS_RECEIVABLE

                                 FROM ACCOUNT_OPER
                                 WHERE OPER_TYPE <> 'ORDER_PAY';

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET Done = 1;

    OPEN order_csr;
-- 第一个循环
    order_loop: LOOP -- Loop through org_grade
      FETCH order_csr
      INTO _AID, _OPER_TYPE,_PAY_TYPE,_REMIT_FEE,_USE_CHECK,_CHECK_NUMBER,_BANK_ID,_AD_MONEY,_AC_MONEY,_PAC_MONEY;
      IF Done = 1
      THEN
        LEAVE order_loop;
      END IF;

      IF _OPER_TYPE = 'DEPOSIT_BACK'
      THEN
        INSERT INTO MONEY_SAVE (ID, PAY_TYPE, REMIT_FEE, USE_CHECK, CHECK_NUMBER, NUMBER, MONEY)
        VALUES (_AID, _PAY_TYPE,_REMIT_FEE,_USE_CHECK,_CHECK_NUMBER,_BANK_ID,_AD_MONEY);
      END IF;

      IF _OPER_TYPE = 'ORDER_SAVINGS'
      THEN
        SET _SAVE_MONEY = _AD_MONEY + _AC_MONEY + _PAC_MONEY - _REMIT_FEE;
        INSERT INTO MONEY_SAVE (ID, PAY_TYPE, REMIT_FEE, USE_CHECK, CHECK_NUMBER, NUMBER, MONEY)
        VALUES (_AID, _PAY_TYPE,_REMIT_FEE,_USE_CHECK,_CHECK_NUMBER,_BANK_ID, _SAVE_MONEY);
        UPDATE ACCOUNT_OPER SET OPER_TYPE = 'CUSTOMER_SAVINGS' WHERE ACCOUNT_OPER.ID = _AID;
      END IF;

      IF _OPER_TYPE = 'PRE_DEPOSIT'
      THEN
        SET _SAVE_MONEY = _AD_MONEY + _AC_MONEY - _REMIT_FEE;
        INSERT INTO MONEY_SAVE (ID, PAY_TYPE, REMIT_FEE, USE_CHECK, CHECK_NUMBER, NUMBER, MONEY)
        VALUES (_AID, _PAY_TYPE,_REMIT_FEE,_USE_CHECK,_CHECK_NUMBER,_BANK_ID, _SAVE_MONEY);
        UPDATE ACCOUNT_OPER SET OPER_TYPE = 'CUSTOMER_SAVINGS' WHERE ACCOUNT_OPER.ID = _AID;
      END IF;

      IF _OPER_TYPE = 'MONEY_BACK_TO_CUSTOMER'
      THEN

        INSERT INTO MONEY_SAVE (ID, PAY_TYPE, REMIT_FEE, USE_CHECK, CHECK_NUMBER, NUMBER, MONEY)
        VALUES (_AID, _PAY_TYPE,_REMIT_FEE,_USE_CHECK,_CHECK_NUMBER,_BANK_ID, _AC_MONEY);
      END IF;

-- 结束第二个循环
    END LOOP order_loop;
    CLOSE order_csr;
  END;
//
DELIMITER ;

CALL CALC_REVEIVE_MONEY();

DROP PROCEDURE CALC_REVEIVE_MONEY;

-- ORDER_BACK  -- MONEY_BACK_TO_CUSTOMER

DELETE FROM ACCOUNT_OPER WHERE OPER_TYPE = 'ORDER_BACK';

UPDATE ACCOUNT_OPER SET OPER_TYPE = 'ORDER_BACK' WHERE OPER_TYPE = 'MONEY_BACK_TO_CUSTOMER';


ALTER TABLE MINI_ERP.ACCOUNT_OPER DROP FOREIGN KEY ACCOUNT_OPER_ibfk_5;
ALTER TABLE MINI_ERP.ACCOUNT_OPER DROP BANK_ACCOUNT;

ALTER TABLE MINI_ERP.ACCOUNT_OPER DROP REMIT_FEE;

ALTER TABLE MINI_ERP.ACCOUNT_OPER DROP PAY_TYPE;

ALTER TABLE MINI_ERP.ACCOUNT_OPER DROP CHECK_NUMBER;

ALTER TABLE MINI_ERP.ACCOUNT_OPER DROP USE_CHECK;


ALTER TABLE MINI_ERP.PREPARE_PAY DROP FOREIGN KEY PREPARE_PAY_ibfk_1;
DROP TABLE MINI_ERP.PREPARE_PAY;

ALTER TABLE MINI_ERP.BACK_PREPARE_MONEY DROP FOREIGN KEY BACK_PREPARE_MONEY_ibfk_1;
DROP TABLE MINI_ERP.BACK_PREPARE_MONEY;



--   ----------------  ACCOUNT


ALTER TABLE MINI_ERP.CUSTOMER_ACCOUNT_CHECK_OUT DROP FOREIGN KEY CUSTOMER_ACCOUNT_CHECK_OUT_ibfk_1;
ALTER TABLE MINI_ERP.CUSTOMER_ACCOUNT_CHECK_OUT DROP FOREIGN KEY CUSTOMER_ACCOUNT_CHECK_OUT_ibfk_2;
DROP TABLE MINI_ERP.CUSTOMER_ACCOUNT_CHECK_OUT;


ALTER TABLE MINI_ERP.STOCK_ACCOUNT_CHECK_OUT DROP FOREIGN KEY STOCK_ACCOUNT_CHECK_OUT_ibfk_1;
ALTER TABLE MINI_ERP.STOCK_ACCOUNT_CHECK_OUT DROP FOREIGN KEY STOCK_ACCOUNT_CHECK_OUT_ibfk_2;
DROP TABLE MINI_ERP.STOCK_ACCOUNT_CHECK_OUT;

DROP TABLE MINI_ERP.ACCOUNT_CHECKOUT;


CREATE TABLE MINI_ERP.ACCOUNT_CHECK_OUT
(
  ID VARCHAR(32) NOT NULL COMMENT 'ID',
  BEGINNING_BALANCE DECIMAL(19,4) NOT NULL COMMENT '期初余额',
  BEGINNING_COUNT DECIMAL(19,4) NOT NULL COMMENT '期初数量',
  CLOSING_BALANCE DECIMAL(19,4) NOT NULL COMMENT '期末余额',
  CLOSING_COUNT DECIMAL(19,4) NOT NULL COMMENT '期末数量',
  DEBIT_MONEY DECIMAL(19,4) NOT NULL COMMENT '借方金额',
  DEBIT_COUNT DECIMAL(19,4) NOT NULL COMMENT '借方数量',
  CREDIT_MONEY DECIMAL(19,4) NOT NULL COMMENT '贷方金额',
  CREDIT_COUNT DECIMAL(19,4) NOT NULL COMMENT '贷方数量',
  CHECKOUT VARCHAR(32) NOT NULL COMMENT 'CHECKOUT',
  VERSION INT COMMENT 'VERSION',
  ACCOUNT_CODE VARCHAR(20) NOT NULL COMMENT '科目代码',
  PRIMARY KEY (ID),
  CONSTRAINT UNIQUE_CUSTOMER_CHECKOUT UNIQUE (CHECKOUT)
) ENGINE = InnoDB COMMENT = '科目结帐' DEFAULT CHARACTER SET utf8;

CREATE TABLE MINI_ERP.CHECK_OUT
(
  ID VARCHAR(32) NOT NULL COMMENT 'ID',
  C_YEAR INT NOT NULL COMMENT 'C_YEAR',
  C_MONTH INT NOT NULL COMMENT 'C_MONTH',
  CHECKOUT_TIME TIMESTAMP NOT NULL COMMENT 'CHECKOUT_TIME',
  OPER_EMP VARCHAR(32) NOT NULL COMMENT '操作人',
  BEGIN_DAY INT NOT NULL COMMENT '结算日',
  VERSION INT COMMENT 'VERSION',
  PRIMARY KEY (ID)
) ENGINE = InnoDB COMMENT = '结账' DEFAULT CHARACTER SET utf8;

CREATE TABLE MINI_ERP.ACCOUNT
(
  ACCOUNT_CODE VARCHAR(20) NOT NULL COMMENT '科目代码',
  ACCOUNT_LEVEL INT NOT NULL COMMENT '科目级别',
  ACCOUNT_NAME VARCHAR(50) NOT NULL COMMENT '科目名称',
  DIRECTION VARCHAR(10) NOT NULL COMMENT '方向',
  PRIMARY KEY (ACCOUNT_CODE)
) ENGINE = InnoDB COMMENT = 'ACCOUNT' DEFAULT CHARACTER SET utf8;

ALTER TABLE MINI_ERP.ACCOUNT_CHECK_OUT
ADD FOREIGN KEY (CHECKOUT)
REFERENCES MINI_ERP.CHECK_OUT (ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT
;

ALTER TABLE MINI_ERP.ACCOUNT_CHECK_OUT
ADD FOREIGN KEY (ACCOUNT_CODE)
REFERENCES MINI_ERP.ACCOUNT (ACCOUNT_CODE)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT
;









